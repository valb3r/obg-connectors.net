/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITppBankSearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Request the profile of the bank identified with id (bankId).
        /// </summary>
        /// <remarks>
        /// Request the profile of the bank identified with id (bankId).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="bankId">Identifier of the bank to be loaded.</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <returns>BankProfileResponse</returns>
        BankProfileResponse BankProfileGET(Guid xRequestID, string bankId, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string));

        /// <summary>
        /// Request the profile of the bank identified with id (bankId).
        /// </summary>
        /// <remarks>
        /// Request the profile of the bank identified with id (bankId).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="bankId">Identifier of the bank to be loaded.</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <returns>ApiResponse of BankProfileResponse</returns>
        ApiResponse<BankProfileResponse> BankProfileGETWithHttpInfo(Guid xRequestID, string bankId, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string));
        /// <summary>
        /// Issues an incremental bank search request to the TppBankSearchApi.
        /// </summary>
        /// <remarks>
        /// Issues an incremental bank search request to the TppBankSearchApi.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="keyword">The bank search input string</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="start">The index of the first result (optional)</param>
        /// <param name="max">The max number of entries to return with the response. (optional)</param>
        /// <returns>BankSearchResponse</returns>
        BankSearchResponse BankSearchGET(Guid xRequestID, string keyword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), int? start = default(int?), int? max = default(int?));

        /// <summary>
        /// Issues an incremental bank search request to the TppBankSearchApi.
        /// </summary>
        /// <remarks>
        /// Issues an incremental bank search request to the TppBankSearchApi.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="keyword">The bank search input string</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="start">The index of the first result (optional)</param>
        /// <param name="max">The max number of entries to return with the response. (optional)</param>
        /// <returns>ApiResponse of BankSearchResponse</returns>
        ApiResponse<BankSearchResponse> BankSearchGETWithHttpInfo(Guid xRequestID, string keyword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), int? start = default(int?), int? max = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITppBankSearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Request the profile of the bank identified with id (bankId).
        /// </summary>
        /// <remarks>
        /// Request the profile of the bank identified with id (bankId).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="bankId">Identifier of the bank to be loaded.</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankProfileResponse</returns>
        System.Threading.Tasks.Task<BankProfileResponse> BankProfileGETAsync(Guid xRequestID, string bankId, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request the profile of the bank identified with id (bankId).
        /// </summary>
        /// <remarks>
        /// Request the profile of the bank identified with id (bankId).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="bankId">Identifier of the bank to be loaded.</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankProfileResponse>> BankProfileGETWithHttpInfoAsync(Guid xRequestID, string bankId, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Issues an incremental bank search request to the TppBankSearchApi.
        /// </summary>
        /// <remarks>
        /// Issues an incremental bank search request to the TppBankSearchApi.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="keyword">The bank search input string</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="start">The index of the first result (optional)</param>
        /// <param name="max">The max number of entries to return with the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankSearchResponse</returns>
        System.Threading.Tasks.Task<BankSearchResponse> BankSearchGETAsync(Guid xRequestID, string keyword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), int? start = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Issues an incremental bank search request to the TppBankSearchApi.
        /// </summary>
        /// <remarks>
        /// Issues an incremental bank search request to the TppBankSearchApi.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="keyword">The bank search input string</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="start">The index of the first result (optional)</param>
        /// <param name="max">The max number of entries to return with the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankSearchResponse>> BankSearchGETWithHttpInfoAsync(Guid xRequestID, string keyword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), int? start = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITppBankSearchApi : ITppBankSearchApiSync, ITppBankSearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TppBankSearchApi : ITppBankSearchApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TppBankSearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TppBankSearchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TppBankSearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TppBankSearchApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TppBankSearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TppBankSearchApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TppBankSearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TppBankSearchApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Request the profile of the bank identified with id (bankId). Request the profile of the bank identified with id (bankId).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="bankId">Identifier of the bank to be loaded.</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <returns>BankProfileResponse</returns>
        public BankProfileResponse BankProfileGET(Guid xRequestID, string bankId, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<BankProfileResponse> localVarResponse = BankProfileGETWithHttpInfo(xRequestID, bankId, xTimestampUTC, xRequestSignature, fintechID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request the profile of the bank identified with id (bankId). Request the profile of the bank identified with id (bankId).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="bankId">Identifier of the bank to be loaded.</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <returns>ApiResponse of BankProfileResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankProfileResponse> BankProfileGETWithHttpInfo(Guid xRequestID, string bankId, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string))
        {
            // verify the required parameter 'bankId' is set
            if (bankId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankId' when calling TppBankSearchApi->BankProfileGET");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bankId", bankId));
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BankProfileResponse>("/v1/banking/search/bank-profile", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankProfileGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request the profile of the bank identified with id (bankId). Request the profile of the bank identified with id (bankId).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="bankId">Identifier of the bank to be loaded.</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankProfileResponse</returns>
        public async System.Threading.Tasks.Task<BankProfileResponse> BankProfileGETAsync(Guid xRequestID, string bankId, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankProfileResponse> localVarResponse = await BankProfileGETWithHttpInfoAsync(xRequestID, bankId, xTimestampUTC, xRequestSignature, fintechID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request the profile of the bank identified with id (bankId). Request the profile of the bank identified with id (bankId).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="bankId">Identifier of the bank to be loaded.</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankProfileResponse>> BankProfileGETWithHttpInfoAsync(Guid xRequestID, string bankId, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bankId' is set
            if (bankId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankId' when calling TppBankSearchApi->BankProfileGET");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bankId", bankId));
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BankProfileResponse>("/v1/banking/search/bank-profile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankProfileGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issues an incremental bank search request to the TppBankSearchApi. Issues an incremental bank search request to the TppBankSearchApi.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="keyword">The bank search input string</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="start">The index of the first result (optional)</param>
        /// <param name="max">The max number of entries to return with the response. (optional)</param>
        /// <returns>BankSearchResponse</returns>
        public BankSearchResponse BankSearchGET(Guid xRequestID, string keyword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), int? start = default(int?), int? max = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BankSearchResponse> localVarResponse = BankSearchGETWithHttpInfo(xRequestID, keyword, xTimestampUTC, xRequestSignature, fintechID, start, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issues an incremental bank search request to the TppBankSearchApi. Issues an incremental bank search request to the TppBankSearchApi.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="keyword">The bank search input string</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="start">The index of the first result (optional)</param>
        /// <param name="max">The max number of entries to return with the response. (optional)</param>
        /// <returns>ApiResponse of BankSearchResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankSearchResponse> BankSearchGETWithHttpInfo(Guid xRequestID, string keyword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), int? start = default(int?), int? max = default(int?))
        {
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'keyword' when calling TppBankSearchApi->BankSearchGET");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BankSearchResponse>("/v1/banking/search/bank-search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankSearchGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issues an incremental bank search request to the TppBankSearchApi. Issues an incremental bank search request to the TppBankSearchApi.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="keyword">The bank search input string</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="start">The index of the first result (optional)</param>
        /// <param name="max">The max number of entries to return with the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankSearchResponse</returns>
        public async System.Threading.Tasks.Task<BankSearchResponse> BankSearchGETAsync(Guid xRequestID, string keyword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), int? start = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankSearchResponse> localVarResponse = await BankSearchGETWithHttpInfoAsync(xRequestID, keyword, xTimestampUTC, xRequestSignature, fintechID, start, max, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issues an incremental bank search request to the TppBankSearchApi. Issues an incremental bank search request to the TppBankSearchApi.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="keyword">The bank search input string</param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="start">The index of the first result (optional)</param>
        /// <param name="max">The max number of entries to return with the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankSearchResponse>> BankSearchGETWithHttpInfoAsync(Guid xRequestID, string keyword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), int? start = default(int?), int? max = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'keyword' is set
            if (keyword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'keyword' when calling TppBankSearchApi->BankSearchGET");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BankSearchResponse>("/v1/banking/search/bank-search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BankSearchGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
