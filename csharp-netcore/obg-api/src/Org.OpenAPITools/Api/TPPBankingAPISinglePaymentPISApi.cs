/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITPPBankingAPISinglePaymentPISApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Payment initiation request
        /// </summary>
        /// <remarks>
        /// This method is used to initiate a payment at the ASPSP.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="body"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="xPsuAuthenticationRequired">If false, login form to OPBA will not be displayed, so that authentication is not necessary. If absent or true - login form will be displayed, in order for OBG to know the PSU.  (optional, default to true)</param>
        /// <returns>PaymentInitiationResponse</returns>
        PaymentInitiationResponse InitiatePayment(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string paymentProduct, PaymentInitiation body, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), bool? xPsuAuthenticationRequired = default(bool?));

        /// <summary>
        /// Payment initiation request
        /// </summary>
        /// <remarks>
        /// This method is used to initiate a payment at the ASPSP.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="body"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="xPsuAuthenticationRequired">If false, login form to OPBA will not be displayed, so that authentication is not necessary. If absent or true - login form will be displayed, in order for OBG to know the PSU.  (optional, default to true)</param>
        /// <returns>ApiResponse of PaymentInitiationResponse</returns>
        ApiResponse<PaymentInitiationResponse> InitiatePaymentWithHttpInfo(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string paymentProduct, PaymentInitiation body, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), bool? xPsuAuthenticationRequired = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITPPBankingAPISinglePaymentPISApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Payment initiation request
        /// </summary>
        /// <remarks>
        /// This method is used to initiate a payment at the ASPSP.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="body"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="xPsuAuthenticationRequired">If false, login form to OPBA will not be displayed, so that authentication is not necessary. If absent or true - login form will be displayed, in order for OBG to know the PSU.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationResponse</returns>
        System.Threading.Tasks.Task<PaymentInitiationResponse> InitiatePaymentAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string paymentProduct, PaymentInitiation body, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), bool? xPsuAuthenticationRequired = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Payment initiation request
        /// </summary>
        /// <remarks>
        /// This method is used to initiate a payment at the ASPSP.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="body"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="xPsuAuthenticationRequired">If false, login form to OPBA will not be displayed, so that authentication is not necessary. If absent or true - login form will be displayed, in order for OBG to know the PSU.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentInitiationResponse>> InitiatePaymentWithHttpInfoAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string paymentProduct, PaymentInitiation body, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), bool? xPsuAuthenticationRequired = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITPPBankingAPISinglePaymentPISApi : ITPPBankingAPISinglePaymentPISApiSync, ITPPBankingAPISinglePaymentPISApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TPPBankingAPISinglePaymentPISApi : ITPPBankingAPISinglePaymentPISApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPISinglePaymentPISApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TPPBankingAPISinglePaymentPISApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPISinglePaymentPISApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TPPBankingAPISinglePaymentPISApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPISinglePaymentPISApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TPPBankingAPISinglePaymentPISApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPISinglePaymentPISApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TPPBankingAPISinglePaymentPISApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Payment initiation request This method is used to initiate a payment at the ASPSP.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="body"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="xPsuAuthenticationRequired">If false, login form to OPBA will not be displayed, so that authentication is not necessary. If absent or true - login form will be displayed, in order for OBG to know the PSU.  (optional, default to true)</param>
        /// <returns>PaymentInitiationResponse</returns>
        public PaymentInitiationResponse InitiatePayment(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string paymentProduct, PaymentInitiation body, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), bool? xPsuAuthenticationRequired = default(bool?))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationResponse> localVarResponse = InitiatePaymentWithHttpInfo(serviceSessionPassword, fintechUserID, fintechRedirectURLOK, fintechRedirectURLNOK, xRequestID, paymentProduct, body, xTimestampUTC, xRequestSignature, fintechID, bankID, xPsuAuthenticationRequired);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Payment initiation request This method is used to initiate a payment at the ASPSP.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="body"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="xPsuAuthenticationRequired">If false, login form to OPBA will not be displayed, so that authentication is not necessary. If absent or true - login form will be displayed, in order for OBG to know the PSU.  (optional, default to true)</param>
        /// <returns>ApiResponse of PaymentInitiationResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentInitiationResponse> InitiatePaymentWithHttpInfo(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string paymentProduct, PaymentInitiation body, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), bool? xPsuAuthenticationRequired = default(bool?))
        {
            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");

            // verify the required parameter 'fintechRedirectURLOK' is set
            if (fintechRedirectURLOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLOK' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");

            // verify the required parameter 'fintechRedirectURLNOK' is set
            if (fintechRedirectURLNOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLNOK' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");

            // verify the required parameter 'paymentProduct' is set
            if (paymentProduct == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentProduct' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("payment-product", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentProduct)); // path parameter
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            if (xPsuAuthenticationRequired != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Psu-Authentication-Required", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xPsuAuthenticationRequired)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-OK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLOK)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-NOK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLNOK)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentInitiationResponse>("/v1/banking/pis/payments/{payment-product}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitiatePayment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Payment initiation request This method is used to initiate a payment at the ASPSP.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="body"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="xPsuAuthenticationRequired">If false, login form to OPBA will not be displayed, so that authentication is not necessary. If absent or true - login form will be displayed, in order for OBG to know the PSU.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInitiationResponse</returns>
        public async System.Threading.Tasks.Task<PaymentInitiationResponse> InitiatePaymentAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string paymentProduct, PaymentInitiation body, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), bool? xPsuAuthenticationRequired = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInitiationResponse> localVarResponse = await InitiatePaymentWithHttpInfoAsync(serviceSessionPassword, fintechUserID, fintechRedirectURLOK, fintechRedirectURLNOK, xRequestID, paymentProduct, body, xTimestampUTC, xRequestSignature, fintechID, bankID, xPsuAuthenticationRequired, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Payment initiation request This method is used to initiate a payment at the ASPSP.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="body"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="xPsuAuthenticationRequired">If false, login form to OPBA will not be displayed, so that authentication is not necessary. If absent or true - login form will be displayed, in order for OBG to know the PSU.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInitiationResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentInitiationResponse>> InitiatePaymentWithHttpInfoAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string paymentProduct, PaymentInitiation body, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), bool? xPsuAuthenticationRequired = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");

            // verify the required parameter 'fintechRedirectURLOK' is set
            if (fintechRedirectURLOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLOK' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");

            // verify the required parameter 'fintechRedirectURLNOK' is set
            if (fintechRedirectURLNOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLNOK' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");

            // verify the required parameter 'paymentProduct' is set
            if (paymentProduct == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentProduct' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling TPPBankingAPISinglePaymentPISApi->InitiatePayment");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("payment-product", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentProduct)); // path parameter
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            if (xPsuAuthenticationRequired != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Psu-Authentication-Required", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xPsuAuthenticationRequired)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-OK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLOK)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-NOK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLNOK)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.Data = body;

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentInitiationResponse>("/v1/banking/pis/payments/{payment-product}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitiatePayment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
