/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFromASPSPConsentAuthorizationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization.
        /// </summary>
        /// <remarks>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <returns>ConsentAuth</returns>
        ConsentAuth FromAspspNokUsingGET(string authId, string redirectState, string fromAspspRedirectCode);

        /// <summary>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization.
        /// </summary>
        /// <remarks>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <returns>ApiResponse of ConsentAuth</returns>
        ApiResponse<ConsentAuth> FromAspspNokUsingGETWithHttpInfo(string authId, string redirectState, string fromAspspRedirectCode);
        /// <summary>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization.
        /// </summary>
        /// <remarks>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request.  ##### Desiging the BackRedirectURL (R&lt;sub&gt;6&lt;/sub&gt;) The BackRedirectURL (OkUrl, NokUrl, etc... depending of ASPSP API) is the URL used by the ASPSP to send the PsuUserAgent back to the ConsentAuthorisationApi. Event though the structure of this URL might be constrained by the nature of the ASPSP OpenBankingApi, the BackRedirectURL must contains atleast : * A redirect-id (as a path parameter) used to isolate many redirect processes form each order. * A consentAuthState (as a path or query parameter) used to protect the TppConsentSessionCookie as a XSRF parameter. * The consentAuthState might if necessary be used to encrypt the attached ConsentAuthSessionCookie.  ##### Back-Redirecting PSU to the FinTechApi (4&lt;sub&gt;b&lt;/sub&gt;) Prior to redirecting the PSU back to the FinTechApi, consent information will be stored by the ConsentAuthorisationApi in a RedirectSession as well. * The one time resulting redirectCode will be attached as a query parameter to the location URL leading back to the FinTechApi. * After verifying the FinTechRedirectSessionCookie (4&lt;sub&gt;b&lt;/sub&gt;), the FinTechApi must forward this redirectCode to the token endpoint of the TppBankingAPi (4&lt;sub&gt;c&lt;/sub&gt;).  * The TppBankingApi will then retrieve the RedirectSession using the redirectCode and proceed forward with the authorization process. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="code">Oauth2 code to exchange for token. (optional)</param>
        /// <returns>ConsentAuth</returns>
        ConsentAuth FromAspspOkUsingGET(string authId, string redirectState, string fromAspspRedirectCode, string code = default(string));

        /// <summary>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization.
        /// </summary>
        /// <remarks>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request.  ##### Desiging the BackRedirectURL (R&lt;sub&gt;6&lt;/sub&gt;) The BackRedirectURL (OkUrl, NokUrl, etc... depending of ASPSP API) is the URL used by the ASPSP to send the PsuUserAgent back to the ConsentAuthorisationApi. Event though the structure of this URL might be constrained by the nature of the ASPSP OpenBankingApi, the BackRedirectURL must contains atleast : * A redirect-id (as a path parameter) used to isolate many redirect processes form each order. * A consentAuthState (as a path or query parameter) used to protect the TppConsentSessionCookie as a XSRF parameter. * The consentAuthState might if necessary be used to encrypt the attached ConsentAuthSessionCookie.  ##### Back-Redirecting PSU to the FinTechApi (4&lt;sub&gt;b&lt;/sub&gt;) Prior to redirecting the PSU back to the FinTechApi, consent information will be stored by the ConsentAuthorisationApi in a RedirectSession as well. * The one time resulting redirectCode will be attached as a query parameter to the location URL leading back to the FinTechApi. * After verifying the FinTechRedirectSessionCookie (4&lt;sub&gt;b&lt;/sub&gt;), the FinTechApi must forward this redirectCode to the token endpoint of the TppBankingAPi (4&lt;sub&gt;c&lt;/sub&gt;).  * The TppBankingApi will then retrieve the RedirectSession using the redirectCode and proceed forward with the authorization process. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="code">Oauth2 code to exchange for token. (optional)</param>
        /// <returns>ApiResponse of ConsentAuth</returns>
        ApiResponse<ConsentAuth> FromAspspOkUsingGETWithHttpInfo(string authId, string redirectState, string fromAspspRedirectCode, string code = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFromASPSPConsentAuthorizationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization.
        /// </summary>
        /// <remarks>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentAuth</returns>
        System.Threading.Tasks.Task<ConsentAuth> FromAspspNokUsingGETAsync(string authId, string redirectState, string fromAspspRedirectCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization.
        /// </summary>
        /// <remarks>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentAuth)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsentAuth>> FromAspspNokUsingGETWithHttpInfoAsync(string authId, string redirectState, string fromAspspRedirectCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization.
        /// </summary>
        /// <remarks>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request.  ##### Desiging the BackRedirectURL (R&lt;sub&gt;6&lt;/sub&gt;) The BackRedirectURL (OkUrl, NokUrl, etc... depending of ASPSP API) is the URL used by the ASPSP to send the PsuUserAgent back to the ConsentAuthorisationApi. Event though the structure of this URL might be constrained by the nature of the ASPSP OpenBankingApi, the BackRedirectURL must contains atleast : * A redirect-id (as a path parameter) used to isolate many redirect processes form each order. * A consentAuthState (as a path or query parameter) used to protect the TppConsentSessionCookie as a XSRF parameter. * The consentAuthState might if necessary be used to encrypt the attached ConsentAuthSessionCookie.  ##### Back-Redirecting PSU to the FinTechApi (4&lt;sub&gt;b&lt;/sub&gt;) Prior to redirecting the PSU back to the FinTechApi, consent information will be stored by the ConsentAuthorisationApi in a RedirectSession as well. * The one time resulting redirectCode will be attached as a query parameter to the location URL leading back to the FinTechApi. * After verifying the FinTechRedirectSessionCookie (4&lt;sub&gt;b&lt;/sub&gt;), the FinTechApi must forward this redirectCode to the token endpoint of the TppBankingAPi (4&lt;sub&gt;c&lt;/sub&gt;).  * The TppBankingApi will then retrieve the RedirectSession using the redirectCode and proceed forward with the authorization process. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="code">Oauth2 code to exchange for token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentAuth</returns>
        System.Threading.Tasks.Task<ConsentAuth> FromAspspOkUsingGETAsync(string authId, string redirectState, string fromAspspRedirectCode, string code = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization.
        /// </summary>
        /// <remarks>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request.  ##### Desiging the BackRedirectURL (R&lt;sub&gt;6&lt;/sub&gt;) The BackRedirectURL (OkUrl, NokUrl, etc... depending of ASPSP API) is the URL used by the ASPSP to send the PsuUserAgent back to the ConsentAuthorisationApi. Event though the structure of this URL might be constrained by the nature of the ASPSP OpenBankingApi, the BackRedirectURL must contains atleast : * A redirect-id (as a path parameter) used to isolate many redirect processes form each order. * A consentAuthState (as a path or query parameter) used to protect the TppConsentSessionCookie as a XSRF parameter. * The consentAuthState might if necessary be used to encrypt the attached ConsentAuthSessionCookie.  ##### Back-Redirecting PSU to the FinTechApi (4&lt;sub&gt;b&lt;/sub&gt;) Prior to redirecting the PSU back to the FinTechApi, consent information will be stored by the ConsentAuthorisationApi in a RedirectSession as well. * The one time resulting redirectCode will be attached as a query parameter to the location URL leading back to the FinTechApi. * After verifying the FinTechRedirectSessionCookie (4&lt;sub&gt;b&lt;/sub&gt;), the FinTechApi must forward this redirectCode to the token endpoint of the TppBankingAPi (4&lt;sub&gt;c&lt;/sub&gt;).  * The TppBankingApi will then retrieve the RedirectSession using the redirectCode and proceed forward with the authorization process. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="code">Oauth2 code to exchange for token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentAuth)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsentAuth>> FromAspspOkUsingGETWithHttpInfoAsync(string authId, string redirectState, string fromAspspRedirectCode, string code = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFromASPSPConsentAuthorizationApi : IFromASPSPConsentAuthorizationApiSync, IFromASPSPConsentAuthorizationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FromASPSPConsentAuthorizationApi : IFromASPSPConsentAuthorizationApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FromASPSPConsentAuthorizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FromASPSPConsentAuthorizationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FromASPSPConsentAuthorizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FromASPSPConsentAuthorizationApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FromASPSPConsentAuthorizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FromASPSPConsentAuthorizationApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FromASPSPConsentAuthorizationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FromASPSPConsentAuthorizationApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization. Redirecting back from ASPSP to TPP after a failed consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <returns>ConsentAuth</returns>
        public ConsentAuth FromAspspNokUsingGET(string authId, string redirectState, string fromAspspRedirectCode)
        {
            Org.OpenAPITools.Client.ApiResponse<ConsentAuth> localVarResponse = FromAspspNokUsingGETWithHttpInfo(authId, redirectState, fromAspspRedirectCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization. Redirecting back from ASPSP to TPP after a failed consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <returns>ApiResponse of ConsentAuth</returns>
        public Org.OpenAPITools.Client.ApiResponse<ConsentAuth> FromAspspNokUsingGETWithHttpInfo(string authId, string redirectState, string fromAspspRedirectCode)
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling FromASPSPConsentAuthorizationApi->FromAspspNokUsingGET");

            // verify the required parameter 'redirectState' is set
            if (redirectState == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'redirectState' when calling FromASPSPConsentAuthorizationApi->FromAspspNokUsingGET");

            // verify the required parameter 'fromAspspRedirectCode' is set
            if (fromAspspRedirectCode == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fromAspspRedirectCode' when calling FromASPSPConsentAuthorizationApi->FromAspspNokUsingGET");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            localVarRequestOptions.PathParameters.Add("redirectState", Org.OpenAPITools.Client.ClientUtils.ParameterToString(redirectState)); // path parameter
            localVarRequestOptions.PathParameters.Add("fromAspspRedirectCode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fromAspspRedirectCode)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsentAuth>("/v1/consent/{auth-id}/fromAspsp/{redirectState}/nok/{fromAspspRedirectCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FromAspspNokUsingGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization. Redirecting back from ASPSP to TPP after a failed consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentAuth</returns>
        public async System.Threading.Tasks.Task<ConsentAuth> FromAspspNokUsingGETAsync(string authId, string redirectState, string fromAspspRedirectCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ConsentAuth> localVarResponse = await FromAspspNokUsingGETWithHttpInfoAsync(authId, redirectState, fromAspspRedirectCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redirecting back from ASPSP to TPP after a failed consent authorization. Redirecting back from ASPSP to TPP after a failed consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentAuth)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ConsentAuth>> FromAspspNokUsingGETWithHttpInfoAsync(string authId, string redirectState, string fromAspspRedirectCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling FromASPSPConsentAuthorizationApi->FromAspspNokUsingGET");

            // verify the required parameter 'redirectState' is set
            if (redirectState == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'redirectState' when calling FromASPSPConsentAuthorizationApi->FromAspspNokUsingGET");

            // verify the required parameter 'fromAspspRedirectCode' is set
            if (fromAspspRedirectCode == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fromAspspRedirectCode' when calling FromASPSPConsentAuthorizationApi->FromAspspNokUsingGET");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            localVarRequestOptions.PathParameters.Add("redirectState", Org.OpenAPITools.Client.ClientUtils.ParameterToString(redirectState)); // path parameter
            localVarRequestOptions.PathParameters.Add("fromAspspRedirectCode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fromAspspRedirectCode)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsentAuth>("/v1/consent/{auth-id}/fromAspsp/{redirectState}/nok/{fromAspspRedirectCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FromAspspNokUsingGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request.  ##### Desiging the BackRedirectURL (R&lt;sub&gt;6&lt;/sub&gt;) The BackRedirectURL (OkUrl, NokUrl, etc... depending of ASPSP API) is the URL used by the ASPSP to send the PsuUserAgent back to the ConsentAuthorisationApi. Event though the structure of this URL might be constrained by the nature of the ASPSP OpenBankingApi, the BackRedirectURL must contains atleast : * A redirect-id (as a path parameter) used to isolate many redirect processes form each order. * A consentAuthState (as a path or query parameter) used to protect the TppConsentSessionCookie as a XSRF parameter. * The consentAuthState might if necessary be used to encrypt the attached ConsentAuthSessionCookie.  ##### Back-Redirecting PSU to the FinTechApi (4&lt;sub&gt;b&lt;/sub&gt;) Prior to redirecting the PSU back to the FinTechApi, consent information will be stored by the ConsentAuthorisationApi in a RedirectSession as well. * The one time resulting redirectCode will be attached as a query parameter to the location URL leading back to the FinTechApi. * After verifying the FinTechRedirectSessionCookie (4&lt;sub&gt;b&lt;/sub&gt;), the FinTechApi must forward this redirectCode to the token endpoint of the TppBankingAPi (4&lt;sub&gt;c&lt;/sub&gt;).  * The TppBankingApi will then retrieve the RedirectSession using the redirectCode and proceed forward with the authorization process. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="code">Oauth2 code to exchange for token. (optional)</param>
        /// <returns>ConsentAuth</returns>
        public ConsentAuth FromAspspOkUsingGET(string authId, string redirectState, string fromAspspRedirectCode, string code = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<ConsentAuth> localVarResponse = FromAspspOkUsingGETWithHttpInfo(authId, redirectState, fromAspspRedirectCode, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request.  ##### Desiging the BackRedirectURL (R&lt;sub&gt;6&lt;/sub&gt;) The BackRedirectURL (OkUrl, NokUrl, etc... depending of ASPSP API) is the URL used by the ASPSP to send the PsuUserAgent back to the ConsentAuthorisationApi. Event though the structure of this URL might be constrained by the nature of the ASPSP OpenBankingApi, the BackRedirectURL must contains atleast : * A redirect-id (as a path parameter) used to isolate many redirect processes form each order. * A consentAuthState (as a path or query parameter) used to protect the TppConsentSessionCookie as a XSRF parameter. * The consentAuthState might if necessary be used to encrypt the attached ConsentAuthSessionCookie.  ##### Back-Redirecting PSU to the FinTechApi (4&lt;sub&gt;b&lt;/sub&gt;) Prior to redirecting the PSU back to the FinTechApi, consent information will be stored by the ConsentAuthorisationApi in a RedirectSession as well. * The one time resulting redirectCode will be attached as a query parameter to the location URL leading back to the FinTechApi. * After verifying the FinTechRedirectSessionCookie (4&lt;sub&gt;b&lt;/sub&gt;), the FinTechApi must forward this redirectCode to the token endpoint of the TppBankingAPi (4&lt;sub&gt;c&lt;/sub&gt;).  * The TppBankingApi will then retrieve the RedirectSession using the redirectCode and proceed forward with the authorization process. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="code">Oauth2 code to exchange for token. (optional)</param>
        /// <returns>ApiResponse of ConsentAuth</returns>
        public Org.OpenAPITools.Client.ApiResponse<ConsentAuth> FromAspspOkUsingGETWithHttpInfo(string authId, string redirectState, string fromAspspRedirectCode, string code = default(string))
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling FromASPSPConsentAuthorizationApi->FromAspspOkUsingGET");

            // verify the required parameter 'redirectState' is set
            if (redirectState == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'redirectState' when calling FromASPSPConsentAuthorizationApi->FromAspspOkUsingGET");

            // verify the required parameter 'fromAspspRedirectCode' is set
            if (fromAspspRedirectCode == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fromAspspRedirectCode' when calling FromASPSPConsentAuthorizationApi->FromAspspOkUsingGET");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            localVarRequestOptions.PathParameters.Add("redirectState", Org.OpenAPITools.Client.ClientUtils.ParameterToString(redirectState)); // path parameter
            localVarRequestOptions.PathParameters.Add("fromAspspRedirectCode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fromAspspRedirectCode)); // path parameter
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsentAuth>("/v1/consent/{auth-id}/fromAspsp/{redirectState}/ok/{fromAspspRedirectCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FromAspspOkUsingGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request.  ##### Desiging the BackRedirectURL (R&lt;sub&gt;6&lt;/sub&gt;) The BackRedirectURL (OkUrl, NokUrl, etc... depending of ASPSP API) is the URL used by the ASPSP to send the PsuUserAgent back to the ConsentAuthorisationApi. Event though the structure of this URL might be constrained by the nature of the ASPSP OpenBankingApi, the BackRedirectURL must contains atleast : * A redirect-id (as a path parameter) used to isolate many redirect processes form each order. * A consentAuthState (as a path or query parameter) used to protect the TppConsentSessionCookie as a XSRF parameter. * The consentAuthState might if necessary be used to encrypt the attached ConsentAuthSessionCookie.  ##### Back-Redirecting PSU to the FinTechApi (4&lt;sub&gt;b&lt;/sub&gt;) Prior to redirecting the PSU back to the FinTechApi, consent information will be stored by the ConsentAuthorisationApi in a RedirectSession as well. * The one time resulting redirectCode will be attached as a query parameter to the location URL leading back to the FinTechApi. * After verifying the FinTechRedirectSessionCookie (4&lt;sub&gt;b&lt;/sub&gt;), the FinTechApi must forward this redirectCode to the token endpoint of the TppBankingAPi (4&lt;sub&gt;c&lt;/sub&gt;).  * The TppBankingApi will then retrieve the RedirectSession using the redirectCode and proceed forward with the authorization process. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="code">Oauth2 code to exchange for token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentAuth</returns>
        public async System.Threading.Tasks.Task<ConsentAuth> FromAspspOkUsingGETAsync(string authId, string redirectState, string fromAspspRedirectCode, string code = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ConsentAuth> localVarResponse = await FromAspspOkUsingGETWithHttpInfoAsync(authId, redirectState, fromAspspRedirectCode, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. Redirecting back from ASPSP to ConsentAuthorisationApi after a successful consent authorization. In any case, the corresponding redirect session of the user will be closed and cookies will be deleted with the response to this request.  ##### Desiging the BackRedirectURL (R&lt;sub&gt;6&lt;/sub&gt;) The BackRedirectURL (OkUrl, NokUrl, etc... depending of ASPSP API) is the URL used by the ASPSP to send the PsuUserAgent back to the ConsentAuthorisationApi. Event though the structure of this URL might be constrained by the nature of the ASPSP OpenBankingApi, the BackRedirectURL must contains atleast : * A redirect-id (as a path parameter) used to isolate many redirect processes form each order. * A consentAuthState (as a path or query parameter) used to protect the TppConsentSessionCookie as a XSRF parameter. * The consentAuthState might if necessary be used to encrypt the attached ConsentAuthSessionCookie.  ##### Back-Redirecting PSU to the FinTechApi (4&lt;sub&gt;b&lt;/sub&gt;) Prior to redirecting the PSU back to the FinTechApi, consent information will be stored by the ConsentAuthorisationApi in a RedirectSession as well. * The one time resulting redirectCode will be attached as a query parameter to the location URL leading back to the FinTechApi. * After verifying the FinTechRedirectSessionCookie (4&lt;sub&gt;b&lt;/sub&gt;), the FinTechApi must forward this redirectCode to the token endpoint of the TppBankingAPi (4&lt;sub&gt;c&lt;/sub&gt;).  * The TppBankingApi will then retrieve the RedirectSession using the redirectCode and proceed forward with the authorization process. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="redirectState">XSRF parameter used to validate an RedirectCookie. This is generaly transported as a path parameter. </param>
        /// <param name="fromAspspRedirectCode">Code used to retrieve a redirect session. This is generaly transported as a path parameter due to some banks limitiations (ING ASPSP) instead of being transported as query parameter</param>
        /// <param name="code">Oauth2 code to exchange for token. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentAuth)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ConsentAuth>> FromAspspOkUsingGETWithHttpInfoAsync(string authId, string redirectState, string fromAspspRedirectCode, string code = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling FromASPSPConsentAuthorizationApi->FromAspspOkUsingGET");

            // verify the required parameter 'redirectState' is set
            if (redirectState == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'redirectState' when calling FromASPSPConsentAuthorizationApi->FromAspspOkUsingGET");

            // verify the required parameter 'fromAspspRedirectCode' is set
            if (fromAspspRedirectCode == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fromAspspRedirectCode' when calling FromASPSPConsentAuthorizationApi->FromAspspOkUsingGET");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            localVarRequestOptions.PathParameters.Add("redirectState", Org.OpenAPITools.Client.ClientUtils.ParameterToString(redirectState)); // path parameter
            localVarRequestOptions.PathParameters.Add("fromAspspRedirectCode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fromAspspRedirectCode)); // path parameter
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsentAuth>("/v1/consent/{auth-id}/fromAspsp/{redirectState}/ok/{fromAspspRedirectCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FromAspspOkUsingGET", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
