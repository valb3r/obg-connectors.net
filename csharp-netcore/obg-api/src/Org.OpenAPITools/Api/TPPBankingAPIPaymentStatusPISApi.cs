/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITPPBankingAPIPaymentStatusPISApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get payment information
        /// </summary>
        /// <remarks>
        /// Returns the content of a payment object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <returns>PaymentInformationResponse</returns>
        PaymentInformationResponse GetPaymentInformation(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?));

        /// <summary>
        /// Get payment information
        /// </summary>
        /// <remarks>
        /// Returns the content of a payment object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <returns>ApiResponse of PaymentInformationResponse</returns>
        ApiResponse<PaymentInformationResponse> GetPaymentInformationWithHttpInfo(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?));
        /// <summary>
        /// Payment initiation status request
        /// </summary>
        /// <remarks>
        /// Check the transaction status of a payment initiation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <returns>PaymentStatusResponse</returns>
        PaymentStatusResponse GetPaymentStatus(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?));

        /// <summary>
        /// Payment initiation status request
        /// </summary>
        /// <remarks>
        /// Check the transaction status of a payment initiation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <returns>ApiResponse of PaymentStatusResponse</returns>
        ApiResponse<PaymentStatusResponse> GetPaymentStatusWithHttpInfo(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITPPBankingAPIPaymentStatusPISApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get payment information
        /// </summary>
        /// <remarks>
        /// Returns the content of a payment object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInformationResponse</returns>
        System.Threading.Tasks.Task<PaymentInformationResponse> GetPaymentInformationAsync(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get payment information
        /// </summary>
        /// <remarks>
        /// Returns the content of a payment object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInformationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentInformationResponse>> GetPaymentInformationWithHttpInfoAsync(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Payment initiation status request
        /// </summary>
        /// <remarks>
        /// Check the transaction status of a payment initiation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentStatusResponse</returns>
        System.Threading.Tasks.Task<PaymentStatusResponse> GetPaymentStatusAsync(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Payment initiation status request
        /// </summary>
        /// <remarks>
        /// Check the transaction status of a payment initiation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentStatusResponse>> GetPaymentStatusWithHttpInfoAsync(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITPPBankingAPIPaymentStatusPISApi : ITPPBankingAPIPaymentStatusPISApiSync, ITPPBankingAPIPaymentStatusPISApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TPPBankingAPIPaymentStatusPISApi : ITPPBankingAPIPaymentStatusPISApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPIPaymentStatusPISApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TPPBankingAPIPaymentStatusPISApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPIPaymentStatusPISApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TPPBankingAPIPaymentStatusPISApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPIPaymentStatusPISApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TPPBankingAPIPaymentStatusPISApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPIPaymentStatusPISApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TPPBankingAPIPaymentStatusPISApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get payment information Returns the content of a payment object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <returns>PaymentInformationResponse</returns>
        public PaymentInformationResponse GetPaymentInformation(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInformationResponse> localVarResponse = GetPaymentInformationWithHttpInfo(serviceSessionPassword, fintechUserID, xRequestID, paymentProduct, xTimestampUTC, xRequestSignature, fintechID, bankID, serviceSessionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payment information Returns the content of a payment object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <returns>ApiResponse of PaymentInformationResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentInformationResponse> GetPaymentInformationWithHttpInfo(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?))
        {
            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentInformation");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentInformation");

            // verify the required parameter 'paymentProduct' is set
            if (paymentProduct == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentProduct' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentInformation");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("payment-product", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentProduct)); // path parameter
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            if (serviceSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Service-Session-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentInformationResponse>("/v1/banking/pis/payments/{payment-product}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentInformation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payment information Returns the content of a payment object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentInformationResponse</returns>
        public async System.Threading.Tasks.Task<PaymentInformationResponse> GetPaymentInformationAsync(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentInformationResponse> localVarResponse = await GetPaymentInformationWithHttpInfoAsync(serviceSessionPassword, fintechUserID, xRequestID, paymentProduct, xTimestampUTC, xRequestSignature, fintechID, bankID, serviceSessionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payment information Returns the content of a payment object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentInformationResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentInformationResponse>> GetPaymentInformationWithHttpInfoAsync(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentInformation");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentInformation");

            // verify the required parameter 'paymentProduct' is set
            if (paymentProduct == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentProduct' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentInformation");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("payment-product", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentProduct)); // path parameter
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            if (serviceSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Service-Session-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentInformationResponse>("/v1/banking/pis/payments/{payment-product}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentInformation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Payment initiation status request Check the transaction status of a payment initiation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <returns>PaymentStatusResponse</returns>
        public PaymentStatusResponse GetPaymentStatus(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentStatusResponse> localVarResponse = GetPaymentStatusWithHttpInfo(serviceSessionPassword, fintechUserID, xRequestID, paymentProduct, xTimestampUTC, xRequestSignature, fintechID, bankID, serviceSessionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Payment initiation status request Check the transaction status of a payment initiation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <returns>ApiResponse of PaymentStatusResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentStatusResponse> GetPaymentStatusWithHttpInfo(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?))
        {
            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentStatus");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentStatus");

            // verify the required parameter 'paymentProduct' is set
            if (paymentProduct == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentProduct' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentStatus");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("payment-product", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentProduct)); // path parameter
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            if (serviceSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Service-Session-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentStatusResponse>("/v1/banking/pis/payments/{payment-product}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Payment initiation status request Check the transaction status of a payment initiation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentStatusResponse</returns>
        public async System.Threading.Tasks.Task<PaymentStatusResponse> GetPaymentStatusAsync(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentStatusResponse> localVarResponse = await GetPaymentStatusWithHttpInfoAsync(serviceSessionPassword, fintechUserID, xRequestID, paymentProduct, xTimestampUTC, xRequestSignature, fintechID, bankID, serviceSessionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Payment initiation status request Check the transaction status of a payment initiation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="paymentProduct"></param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentStatusResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentStatusResponse>> GetPaymentStatusWithHttpInfoAsync(string serviceSessionPassword, string fintechUserID, Guid xRequestID, string paymentProduct, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentStatus");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentStatus");

            // verify the required parameter 'paymentProduct' is set
            if (paymentProduct == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentProduct' when calling TPPBankingAPIPaymentStatusPISApi->GetPaymentStatus");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("payment-product", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentProduct)); // path parameter
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            if (serviceSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Service-Session-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentStatusResponse>("/v1/banking/pis/payments/{payment-product}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
