/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentConfirmationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Issues new PSU Consent Session Token.
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <returns>PsuPaymentSessionResponse</returns>
        PsuPaymentSessionResponse ConfirmPayment(string authId, Guid xRequestID, string serviceSessionPassword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string));

        /// <summary>
        /// Issues new PSU Consent Session Token.
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <returns>ApiResponse of PsuPaymentSessionResponse</returns>
        ApiResponse<PsuPaymentSessionResponse> ConfirmPaymentWithHttpInfo(string authId, Guid xRequestID, string serviceSessionPassword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentConfirmationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Issues new PSU Consent Session Token.
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PsuPaymentSessionResponse</returns>
        System.Threading.Tasks.Task<PsuPaymentSessionResponse> ConfirmPaymentAsync(string authId, Guid xRequestID, string serviceSessionPassword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Issues new PSU Consent Session Token.
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PsuPaymentSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PsuPaymentSessionResponse>> ConfirmPaymentWithHttpInfoAsync(string authId, Guid xRequestID, string serviceSessionPassword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentConfirmationApi : IPaymentConfirmationApiSync, IPaymentConfirmationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentConfirmationApi : IPaymentConfirmationApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentConfirmationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentConfirmationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentConfirmationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentConfirmationApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentConfirmationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentConfirmationApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentConfirmationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PaymentConfirmationApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Issues new PSU Consent Session Token. TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <returns>PsuPaymentSessionResponse</returns>
        public PsuPaymentSessionResponse ConfirmPayment(string authId, Guid xRequestID, string serviceSessionPassword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string))
        {
            Org.OpenAPITools.Client.ApiResponse<PsuPaymentSessionResponse> localVarResponse = ConfirmPaymentWithHttpInfo(authId, xRequestID, serviceSessionPassword, xTimestampUTC, xRequestSignature, fintechID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issues new PSU Consent Session Token. TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <returns>ApiResponse of PsuPaymentSessionResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PsuPaymentSessionResponse> ConfirmPaymentWithHttpInfo(string authId, Guid xRequestID, string serviceSessionPassword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string))
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling PaymentConfirmationApi->ConfirmPayment");

            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling PaymentConfirmationApi->ConfirmPayment");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<PsuPaymentSessionResponse>("/v1/banking/payments/{auth-id}/confirm", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmPayment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Issues new PSU Consent Session Token. TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PsuPaymentSessionResponse</returns>
        public async System.Threading.Tasks.Task<PsuPaymentSessionResponse> ConfirmPaymentAsync(string authId, Guid xRequestID, string serviceSessionPassword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PsuPaymentSessionResponse> localVarResponse = await ConfirmPaymentWithHttpInfoAsync(authId, xRequestID, serviceSessionPassword, xTimestampUTC, xRequestSignature, fintechID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Issues new PSU Consent Session Token. TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PsuPaymentSessionResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PsuPaymentSessionResponse>> ConfirmPaymentWithHttpInfoAsync(string authId, Guid xRequestID, string serviceSessionPassword, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling PaymentConfirmationApi->ConfirmPayment");

            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling PaymentConfirmationApi->ConfirmPayment");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PsuPaymentSessionResponse>("/v1/banking/payments/{auth-id}/confirm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmPayment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
