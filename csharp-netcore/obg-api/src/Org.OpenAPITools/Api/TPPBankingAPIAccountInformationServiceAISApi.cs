/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITPPBankingAPIAccountInformationServiceAISApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provides list of available accounts
        /// </summary>
        /// <remarks>
        /// Read the identifiers of the available payment accounts. It is assumed that a consent of the PSU to this access is already given and stored on the TPP system. The addressed list of accounts depends then on the PSU and Consent information, stored respectively the OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="withBalance">For list of accounts this query param defines to not only look for the accounts, but for the balances too.  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <returns>AccountList</returns>
        AccountList GetAccounts(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), bool? withBalance = default(bool?), bool? online = default(bool?));

        /// <summary>
        /// Provides list of available accounts
        /// </summary>
        /// <remarks>
        /// Read the identifiers of the available payment accounts. It is assumed that a consent of the PSU to this access is already given and stored on the TPP system. The addressed list of accounts depends then on the PSU and Consent information, stored respectively the OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="withBalance">For list of accounts this query param defines to not only look for the accounts, but for the balances too.  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <returns>ApiResponse of AccountList</returns>
        ApiResponse<AccountList> GetAccountsWithHttpInfo(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), bool? withBalance = default(bool?), bool? online = default(bool?));
        /// <summary>
        /// Provides list of transactions by given account
        /// </summary>
        /// <remarks>
        /// returns list of transactions for specified account resource ID in case Service-Session-ID is provided and saved consent on tpp by it found. Otherwise initiates creation of new consent
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <returns>TransactionsResponse</returns>
        TransactionsResponse GetTransactions(string accountId, string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), bool? online = default(bool?));

        /// <summary>
        /// Provides list of transactions by given account
        /// </summary>
        /// <remarks>
        /// returns list of transactions for specified account resource ID in case Service-Session-ID is provided and saved consent on tpp by it found. Otherwise initiates creation of new consent
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <returns>ApiResponse of TransactionsResponse</returns>
        ApiResponse<TransactionsResponse> GetTransactionsWithHttpInfo(string accountId, string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), bool? online = default(bool?));
        /// <summary>
        /// Provides consent for accounts and transactions
        /// </summary>
        /// <remarks>
        /// This method initiates creation of consent which then can be used for getting either accounts or transactions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <returns>TransactionsResponse</returns>
        TransactionsResponse GetTransactionsWithoutAccountId(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?));

        /// <summary>
        /// Provides consent for accounts and transactions
        /// </summary>
        /// <remarks>
        /// This method initiates creation of consent which then can be used for getting either accounts or transactions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <returns>ApiResponse of TransactionsResponse</returns>
        ApiResponse<TransactionsResponse> GetTransactionsWithoutAccountIdWithHttpInfo(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITPPBankingAPIAccountInformationServiceAISApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Provides list of available accounts
        /// </summary>
        /// <remarks>
        /// Read the identifiers of the available payment accounts. It is assumed that a consent of the PSU to this access is already given and stored on the TPP system. The addressed list of accounts depends then on the PSU and Consent information, stored respectively the OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="withBalance">For list of accounts this query param defines to not only look for the accounts, but for the balances too.  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountList</returns>
        System.Threading.Tasks.Task<AccountList> GetAccountsAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), bool? withBalance = default(bool?), bool? online = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provides list of available accounts
        /// </summary>
        /// <remarks>
        /// Read the identifiers of the available payment accounts. It is assumed that a consent of the PSU to this access is already given and stored on the TPP system. The addressed list of accounts depends then on the PSU and Consent information, stored respectively the OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="withBalance">For list of accounts this query param defines to not only look for the accounts, but for the balances too.  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountList>> GetAccountsWithHttpInfoAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), bool? withBalance = default(bool?), bool? online = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provides list of transactions by given account
        /// </summary>
        /// <remarks>
        /// returns list of transactions for specified account resource ID in case Service-Session-ID is provided and saved consent on tpp by it found. Otherwise initiates creation of new consent
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponse</returns>
        System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsAsync(string accountId, string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), bool? online = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provides list of transactions by given account
        /// </summary>
        /// <remarks>
        /// returns list of transactions for specified account resource ID in case Service-Session-ID is provided and saved consent on tpp by it found. Otherwise initiates creation of new consent
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsResponse>> GetTransactionsWithHttpInfoAsync(string accountId, string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), bool? online = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provides consent for accounts and transactions
        /// </summary>
        /// <remarks>
        /// This method initiates creation of consent which then can be used for getting either accounts or transactions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponse</returns>
        System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsWithoutAccountIdAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provides consent for accounts and transactions
        /// </summary>
        /// <remarks>
        /// This method initiates creation of consent which then can be used for getting either accounts or transactions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsResponse>> GetTransactionsWithoutAccountIdWithHttpInfoAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITPPBankingAPIAccountInformationServiceAISApi : ITPPBankingAPIAccountInformationServiceAISApiSync, ITPPBankingAPIAccountInformationServiceAISApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TPPBankingAPIAccountInformationServiceAISApi : ITPPBankingAPIAccountInformationServiceAISApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPIAccountInformationServiceAISApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TPPBankingAPIAccountInformationServiceAISApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPIAccountInformationServiceAISApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TPPBankingAPIAccountInformationServiceAISApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPIAccountInformationServiceAISApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TPPBankingAPIAccountInformationServiceAISApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TPPBankingAPIAccountInformationServiceAISApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TPPBankingAPIAccountInformationServiceAISApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Provides list of available accounts Read the identifiers of the available payment accounts. It is assumed that a consent of the PSU to this access is already given and stored on the TPP system. The addressed list of accounts depends then on the PSU and Consent information, stored respectively the OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="withBalance">For list of accounts this query param defines to not only look for the accounts, but for the balances too.  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <returns>AccountList</returns>
        public AccountList GetAccounts(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), bool? withBalance = default(bool?), bool? online = default(bool?))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountList> localVarResponse = GetAccountsWithHttpInfo(serviceSessionPassword, fintechUserID, fintechRedirectURLOK, fintechRedirectURLNOK, xRequestID, xTimestampUTC, xRequestSignature, fintechID, bankID, serviceSessionID, withBalance, online);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides list of available accounts Read the identifiers of the available payment accounts. It is assumed that a consent of the PSU to this access is already given and stored on the TPP system. The addressed list of accounts depends then on the PSU and Consent information, stored respectively the OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="withBalance">For list of accounts this query param defines to not only look for the accounts, but for the balances too.  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <returns>ApiResponse of AccountList</returns>
        public Org.OpenAPITools.Client.ApiResponse<AccountList> GetAccountsWithHttpInfo(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), bool? withBalance = default(bool?), bool? online = default(bool?))
        {
            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPIAccountInformationServiceAISApi->GetAccounts");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPIAccountInformationServiceAISApi->GetAccounts");

            // verify the required parameter 'fintechRedirectURLOK' is set
            if (fintechRedirectURLOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetAccounts");

            // verify the required parameter 'fintechRedirectURLNOK' is set
            if (fintechRedirectURLNOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLNOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetAccounts");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (withBalance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withBalance", withBalance));
            }
            if (online != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "online", online));
            }
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-OK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLOK)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-NOK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLNOK)); // header parameter
            if (serviceSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Service-Session-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountList>("/v1/banking/ais/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provides list of available accounts Read the identifiers of the available payment accounts. It is assumed that a consent of the PSU to this access is already given and stored on the TPP system. The addressed list of accounts depends then on the PSU and Consent information, stored respectively the OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="withBalance">For list of accounts this query param defines to not only look for the accounts, but for the balances too.  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountList</returns>
        public async System.Threading.Tasks.Task<AccountList> GetAccountsAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), bool? withBalance = default(bool?), bool? online = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AccountList> localVarResponse = await GetAccountsWithHttpInfoAsync(serviceSessionPassword, fintechUserID, fintechRedirectURLOK, fintechRedirectURLNOK, xRequestID, xTimestampUTC, xRequestSignature, fintechID, bankID, serviceSessionID, withBalance, online, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides list of available accounts Read the identifiers of the available payment accounts. It is assumed that a consent of the PSU to this access is already given and stored on the TPP system. The addressed list of accounts depends then on the PSU and Consent information, stored respectively the OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="withBalance">For list of accounts this query param defines to not only look for the accounts, but for the balances too.  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AccountList>> GetAccountsWithHttpInfoAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), bool? withBalance = default(bool?), bool? online = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPIAccountInformationServiceAISApi->GetAccounts");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPIAccountInformationServiceAISApi->GetAccounts");

            // verify the required parameter 'fintechRedirectURLOK' is set
            if (fintechRedirectURLOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetAccounts");

            // verify the required parameter 'fintechRedirectURLNOK' is set
            if (fintechRedirectURLNOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLNOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetAccounts");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (withBalance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "withBalance", withBalance));
            }
            if (online != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "online", online));
            }
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-OK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLOK)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-NOK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLNOK)); // header parameter
            if (serviceSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Service-Session-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountList>("/v1/banking/ais/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provides list of transactions by given account returns list of transactions for specified account resource ID in case Service-Session-ID is provided and saved consent on tpp by it found. Otherwise initiates creation of new consent
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <returns>TransactionsResponse</returns>
        public TransactionsResponse GetTransactions(string accountId, string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), bool? online = default(bool?))
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsResponse> localVarResponse = GetTransactionsWithHttpInfo(accountId, serviceSessionPassword, fintechUserID, fintechRedirectURLOK, fintechRedirectURLNOK, xRequestID, xTimestampUTC, xRequestSignature, fintechID, bankID, serviceSessionID, dateFrom, dateTo, entryReferenceFrom, bookingStatus, deltaList, online);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides list of transactions by given account returns list of transactions for specified account resource ID in case Service-Session-ID is provided and saved consent on tpp by it found. Otherwise initiates creation of new consent
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <returns>ApiResponse of TransactionsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransactionsResponse> GetTransactionsWithHttpInfo(string accountId, string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), bool? online = default(bool?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountId' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactions");

            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactions");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactions");

            // verify the required parameter 'fintechRedirectURLOK' is set
            if (fintechRedirectURLOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactions");

            // verify the required parameter 'fintechRedirectURLNOK' is set
            if (fintechRedirectURLNOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLNOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactions");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("account-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateTo", dateTo));
            }
            if (entryReferenceFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entryReferenceFrom", entryReferenceFrom));
            }
            if (bookingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookingStatus", bookingStatus));
            }
            if (deltaList != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deltaList", deltaList));
            }
            if (online != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "online", online));
            }
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-OK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLOK)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-NOK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLNOK)); // header parameter
            if (serviceSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Service-Session-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionsResponse>("/v1/banking/ais/accounts/{account-id}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provides list of transactions by given account returns list of transactions for specified account resource ID in case Service-Session-ID is provided and saved consent on tpp by it found. Otherwise initiates creation of new consent
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponse</returns>
        public async System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsAsync(string accountId, string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), bool? online = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsResponse> localVarResponse = await GetTransactionsWithHttpInfoAsync(accountId, serviceSessionPassword, fintechUserID, fintechRedirectURLOK, fintechRedirectURLNOK, xRequestID, xTimestampUTC, xRequestSignature, fintechID, bankID, serviceSessionID, dateFrom, dateTo, entryReferenceFrom, bookingStatus, deltaList, online, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides list of transactions by given account returns list of transactions for specified account resource ID in case Service-Session-ID is provided and saved consent on tpp by it found. Otherwise initiates creation of new consent
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="online">Makes possible to request actual data and update cache if cache is used by protocol implementation.  (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransactionsResponse>> GetTransactionsWithHttpInfoAsync(string accountId, string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), bool? online = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accountId' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactions");

            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactions");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactions");

            // verify the required parameter 'fintechRedirectURLOK' is set
            if (fintechRedirectURLOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactions");

            // verify the required parameter 'fintechRedirectURLNOK' is set
            if (fintechRedirectURLNOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLNOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactions");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("account-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateTo", dateTo));
            }
            if (entryReferenceFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entryReferenceFrom", entryReferenceFrom));
            }
            if (bookingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookingStatus", bookingStatus));
            }
            if (deltaList != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deltaList", deltaList));
            }
            if (online != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "online", online));
            }
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-OK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLOK)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-NOK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLNOK)); // header parameter
            if (serviceSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Service-Session-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionsResponse>("/v1/banking/ais/accounts/{account-id}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provides consent for accounts and transactions This method initiates creation of consent which then can be used for getting either accounts or transactions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <returns>TransactionsResponse</returns>
        public TransactionsResponse GetTransactionsWithoutAccountId(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?))
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsResponse> localVarResponse = GetTransactionsWithoutAccountIdWithHttpInfo(serviceSessionPassword, fintechUserID, fintechRedirectURLOK, fintechRedirectURLNOK, xRequestID, xTimestampUTC, xRequestSignature, fintechID, bankID, serviceSessionID, dateFrom, dateTo, entryReferenceFrom, bookingStatus, deltaList);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides consent for accounts and transactions This method initiates creation of consent which then can be used for getting either accounts or transactions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <returns>ApiResponse of TransactionsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransactionsResponse> GetTransactionsWithoutAccountIdWithHttpInfo(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?))
        {
            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactionsWithoutAccountId");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactionsWithoutAccountId");

            // verify the required parameter 'fintechRedirectURLOK' is set
            if (fintechRedirectURLOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactionsWithoutAccountId");

            // verify the required parameter 'fintechRedirectURLNOK' is set
            if (fintechRedirectURLNOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLNOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactionsWithoutAccountId");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateTo", dateTo));
            }
            if (entryReferenceFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entryReferenceFrom", entryReferenceFrom));
            }
            if (bookingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookingStatus", bookingStatus));
            }
            if (deltaList != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deltaList", deltaList));
            }
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-OK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLOK)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-NOK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLNOK)); // header parameter
            if (serviceSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Service-Session-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionsResponse>("/v1/banking/ais/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionsWithoutAccountId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provides consent for accounts and transactions This method initiates creation of consent which then can be used for getting either accounts or transactions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponse</returns>
        public async System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsWithoutAccountIdAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionsResponse> localVarResponse = await GetTransactionsWithoutAccountIdWithHttpInfoAsync(serviceSessionPassword, fintechUserID, fintechRedirectURLOK, fintechRedirectURLNOK, xRequestID, xTimestampUTC, xRequestSignature, fintechID, bankID, serviceSessionID, dateFrom, dateTo, entryReferenceFrom, bookingStatus, deltaList, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides consent for accounts and transactions This method initiates creation of consent which then can be used for getting either accounts or transactions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceSessionPassword">Password to encrypt users&#39; context </param>
        /// <param name="fintechUserID">An End-User identifier, known by FinTech, that unique for each physical person. To be provided by FinTech with every request in order to validate the mapping of service request to the particular user. </param>
        /// <param name="fintechRedirectURLOK"></param>
        /// <param name="fintechRedirectURLNOK"></param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="xTimestampUTC">The timestamp of the operation.  (optional)</param>
        /// <param name="xRequestSignature">A signature of the request by the TPP fintech.  (optional)</param>
        /// <param name="fintechID">Unique ID that identifies fintech.  (optional)</param>
        /// <param name="bankID">A bank identifier, provided by TPP Bank Search API. To be provided by FinTech only if PsuConsentSession is missing.  (optional)</param>
        /// <param name="serviceSessionID">Unique ID that identifies service session. Can be used for batch processing to correlate input and output.  (optional)</param>
        /// <param name="dateFrom">Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="dateTo">End date (inclusive the data dateTo) of the transaction list, default is \&quot;now\&quot; if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP.  (optional)</param>
        /// <param name="entryReferenceFrom">This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \&quot;dateFrom\&quot; and \&quot;dateTo\&quot; might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider.  (optional)</param>
        /// <param name="bookingStatus">Permitted codes are   * \&quot;booked\&quot;,   * \&quot;pending\&quot; and   * \&quot;both\&quot; To support the \&quot;pending\&quot; and \&quot;both\&quot; feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \&quot;booked\&quot;  (optional)</param>
        /// <param name="deltaList">This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.  This delta indicator might be rejected by the ASPSP if this function is not supported.  Optional if supported by API provider  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransactionsResponse>> GetTransactionsWithoutAccountIdWithHttpInfoAsync(string serviceSessionPassword, string fintechUserID, string fintechRedirectURLOK, string fintechRedirectURLNOK, Guid xRequestID, string xTimestampUTC = default(string), string xRequestSignature = default(string), string fintechID = default(string), string bankID = default(string), Guid? serviceSessionID = default(Guid?), DateTime? dateFrom = default(DateTime?), DateTime? dateTo = default(DateTime?), string entryReferenceFrom = default(string), string bookingStatus = default(string), bool? deltaList = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceSessionPassword' is set
            if (serviceSessionPassword == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'serviceSessionPassword' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactionsWithoutAccountId");

            // verify the required parameter 'fintechUserID' is set
            if (fintechUserID == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechUserID' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactionsWithoutAccountId");

            // verify the required parameter 'fintechRedirectURLOK' is set
            if (fintechRedirectURLOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactionsWithoutAccountId");

            // verify the required parameter 'fintechRedirectURLNOK' is set
            if (fintechRedirectURLNOK == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fintechRedirectURLNOK' when calling TPPBankingAPIAccountInformationServiceAISApi->GetTransactionsWithoutAccountId");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dateTo", dateTo));
            }
            if (entryReferenceFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entryReferenceFrom", entryReferenceFrom));
            }
            if (bookingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bookingStatus", bookingStatus));
            }
            if (deltaList != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "deltaList", deltaList));
            }
            if (xTimestampUTC != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Timestamp-UTC", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xTimestampUTC)); // header parameter
            }
            if (xRequestSignature != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Request-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestSignature)); // header parameter
            }
            if (fintechID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Fintech-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Service-Session-Password", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionPassword)); // header parameter
            if (bankID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Bank-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("Fintech-User-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechUserID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-OK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLOK)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("Fintech-Redirect-URL-NOK", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fintechRedirectURLNOK)); // header parameter
            if (serviceSessionID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Service-Session-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(serviceSessionID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter

            // authentication (BearerAuthOAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionsResponse>("/v1/banking/ais/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactionsWithoutAccountId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
