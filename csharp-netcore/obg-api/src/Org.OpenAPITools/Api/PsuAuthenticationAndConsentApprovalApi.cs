/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPsuAuthenticationAndConsentApprovalApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Login user to open-banking to perform payment (anonymous to OPBA)
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <returns>LoginResponse</returns>
        LoginResponse LoginForAnonymousApproval(Guid xRequestID, Guid authorizationId, string redirectCode);

        /// <summary>
        /// Login user to open-banking to perform payment (anonymous to OPBA)
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        ApiResponse<LoginResponse> LoginForAnonymousApprovalWithHttpInfo(Guid xRequestID, Guid authorizationId, string redirectCode);
        /// <summary>
        /// Login user to open-banking
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="psuAuthBody">User credentials object</param>
        /// <returns>LoginResponse</returns>
        LoginResponse LoginForApproval(Guid xRequestID, Guid authorizationId, string redirectCode, PsuAuthBody psuAuthBody);

        /// <summary>
        /// Login user to open-banking
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="psuAuthBody">User credentials object</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        ApiResponse<LoginResponse> LoginForApprovalWithHttpInfo(Guid xRequestID, Guid authorizationId, string redirectCode, PsuAuthBody psuAuthBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPsuAuthenticationAndConsentApprovalApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Login user to open-banking to perform payment (anonymous to OPBA)
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        System.Threading.Tasks.Task<LoginResponse> LoginForAnonymousApprovalAsync(Guid xRequestID, Guid authorizationId, string redirectCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login user to open-banking to perform payment (anonymous to OPBA)
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginResponse>> LoginForAnonymousApprovalWithHttpInfoAsync(Guid xRequestID, Guid authorizationId, string redirectCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Login user to open-banking
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="psuAuthBody">User credentials object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        System.Threading.Tasks.Task<LoginResponse> LoginForApprovalAsync(Guid xRequestID, Guid authorizationId, string redirectCode, PsuAuthBody psuAuthBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login user to open-banking
        /// </summary>
        /// <remarks>
        /// TBD
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="psuAuthBody">User credentials object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginResponse>> LoginForApprovalWithHttpInfoAsync(Guid xRequestID, Guid authorizationId, string redirectCode, PsuAuthBody psuAuthBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPsuAuthenticationAndConsentApprovalApi : IPsuAuthenticationAndConsentApprovalApiSync, IPsuAuthenticationAndConsentApprovalApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PsuAuthenticationAndConsentApprovalApi : IPsuAuthenticationAndConsentApprovalApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PsuAuthenticationAndConsentApprovalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PsuAuthenticationAndConsentApprovalApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PsuAuthenticationAndConsentApprovalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PsuAuthenticationAndConsentApprovalApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PsuAuthenticationAndConsentApprovalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PsuAuthenticationAndConsentApprovalApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PsuAuthenticationAndConsentApprovalApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PsuAuthenticationAndConsentApprovalApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Login user to open-banking to perform payment (anonymous to OPBA) TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <returns>LoginResponse</returns>
        public LoginResponse LoginForAnonymousApproval(Guid xRequestID, Guid authorizationId, string redirectCode)
        {
            Org.OpenAPITools.Client.ApiResponse<LoginResponse> localVarResponse = LoginForAnonymousApprovalWithHttpInfo(xRequestID, authorizationId, redirectCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login user to open-banking to perform payment (anonymous to OPBA) TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<LoginResponse> LoginForAnonymousApprovalWithHttpInfo(Guid xRequestID, Guid authorizationId, string redirectCode)
        {
            // verify the required parameter 'redirectCode' is set
            if (redirectCode == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'redirectCode' when calling PsuAuthenticationAndConsentApprovalApi->LoginForAnonymousApproval");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("authorization-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorizationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "redirectCode", redirectCode));
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<LoginResponse>("/v1/psu/{authorization-id}/for-approval/anonymous", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginForAnonymousApproval", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login user to open-banking to perform payment (anonymous to OPBA) TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        public async System.Threading.Tasks.Task<LoginResponse> LoginForAnonymousApprovalAsync(Guid xRequestID, Guid authorizationId, string redirectCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<LoginResponse> localVarResponse = await LoginForAnonymousApprovalWithHttpInfoAsync(xRequestID, authorizationId, redirectCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login user to open-banking to perform payment (anonymous to OPBA) TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<LoginResponse>> LoginForAnonymousApprovalWithHttpInfoAsync(Guid xRequestID, Guid authorizationId, string redirectCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'redirectCode' is set
            if (redirectCode == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'redirectCode' when calling PsuAuthenticationAndConsentApprovalApi->LoginForAnonymousApproval");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("authorization-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorizationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "redirectCode", redirectCode));
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LoginResponse>("/v1/psu/{authorization-id}/for-approval/anonymous", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginForAnonymousApproval", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login user to open-banking TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="psuAuthBody">User credentials object</param>
        /// <returns>LoginResponse</returns>
        public LoginResponse LoginForApproval(Guid xRequestID, Guid authorizationId, string redirectCode, PsuAuthBody psuAuthBody)
        {
            Org.OpenAPITools.Client.ApiResponse<LoginResponse> localVarResponse = LoginForApprovalWithHttpInfo(xRequestID, authorizationId, redirectCode, psuAuthBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login user to open-banking TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="psuAuthBody">User credentials object</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<LoginResponse> LoginForApprovalWithHttpInfo(Guid xRequestID, Guid authorizationId, string redirectCode, PsuAuthBody psuAuthBody)
        {
            // verify the required parameter 'redirectCode' is set
            if (redirectCode == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'redirectCode' when calling PsuAuthenticationAndConsentApprovalApi->LoginForApproval");

            // verify the required parameter 'psuAuthBody' is set
            if (psuAuthBody == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'psuAuthBody' when calling PsuAuthenticationAndConsentApprovalApi->LoginForApproval");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("authorization-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorizationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "redirectCode", redirectCode));
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.Data = psuAuthBody;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LoginResponse>("/v1/psu/{authorization-id}/for-approval/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginForApproval", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login user to open-banking TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="psuAuthBody">User credentials object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        public async System.Threading.Tasks.Task<LoginResponse> LoginForApprovalAsync(Guid xRequestID, Guid authorizationId, string redirectCode, PsuAuthBody psuAuthBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<LoginResponse> localVarResponse = await LoginForApprovalWithHttpInfoAsync(xRequestID, authorizationId, redirectCode, psuAuthBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login user to open-banking TBD
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="authorizationId">Authorization session ID to approve</param>
        /// <param name="redirectCode">Redirect code that acts as a password protecting FinTech requested consent specification</param>
        /// <param name="psuAuthBody">User credentials object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<LoginResponse>> LoginForApprovalWithHttpInfoAsync(Guid xRequestID, Guid authorizationId, string redirectCode, PsuAuthBody psuAuthBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'redirectCode' is set
            if (redirectCode == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'redirectCode' when calling PsuAuthenticationAndConsentApprovalApi->LoginForApproval");

            // verify the required parameter 'psuAuthBody' is set
            if (psuAuthBody == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'psuAuthBody' when calling PsuAuthenticationAndConsentApprovalApi->LoginForApproval");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("authorization-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorizationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "redirectCode", redirectCode));
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.Data = psuAuthBody;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LoginResponse>("/v1/psu/{authorization-id}/for-approval/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginForApproval", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
