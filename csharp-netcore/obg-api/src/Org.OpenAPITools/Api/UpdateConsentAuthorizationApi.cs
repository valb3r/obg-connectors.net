/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUpdateConsentAuthorizationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Consent authorization is denied - consent is blocked. Closes this session and redirects the PSU back to the FinTechApi or close the application window. 
        /// </summary>
        /// <remarks>
        /// Closes this session and redirects the PSU back to the FinTechApi or close the application window. In any case, the session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="denyRequest"></param>
        /// <returns></returns>
        void DenyUsingPOST(string authId, Guid xRequestID, string X_XSRF_TOKEN, DenyRequest denyRequest);

        /// <summary>
        /// Consent authorization is denied - consent is blocked. Closes this session and redirects the PSU back to the FinTechApi or close the application window. 
        /// </summary>
        /// <remarks>
        /// Closes this session and redirects the PSU back to the FinTechApi or close the application window. In any case, the session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="denyRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DenyUsingPOSTWithHttpInfo(string authId, Guid xRequestID, string X_XSRF_TOKEN, DenyRequest denyRequest);
        /// <summary>
        /// Generic challenge response end point for updating consent session with PSU authentication data while requesting remaining challenges for the ongoing authorization process. 
        /// </summary>
        /// <remarks>
        /// Update consent session with PSU auth data whereby requesting remaining challenges for the ongoing authorization process. Returns 202 if one should proceed to some other link. Link to follow is in &#39;Location&#39; header. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="redirectCode">Code used to retrieve a redirect session. This is generaly transported as a query parameter (optional)</param>
        /// <param name="psuAuthRequest"> (optional)</param>
        /// <returns>ConsentAuth</returns>
        ConsentAuth EmbeddedUsingPOST(string authId, Guid xRequestID, string X_XSRF_TOKEN, string redirectCode = default(string), PsuAuthRequest psuAuthRequest = default(PsuAuthRequest));

        /// <summary>
        /// Generic challenge response end point for updating consent session with PSU authentication data while requesting remaining challenges for the ongoing authorization process. 
        /// </summary>
        /// <remarks>
        /// Update consent session with PSU auth data whereby requesting remaining challenges for the ongoing authorization process. Returns 202 if one should proceed to some other link. Link to follow is in &#39;Location&#39; header. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="redirectCode">Code used to retrieve a redirect session. This is generaly transported as a query parameter (optional)</param>
        /// <param name="psuAuthRequest"> (optional)</param>
        /// <returns>ApiResponse of ConsentAuth</returns>
        ApiResponse<ConsentAuth> EmbeddedUsingPOSTWithHttpInfo(string authId, Guid xRequestID, string X_XSRF_TOKEN, string redirectCode = default(string), PsuAuthRequest psuAuthRequest = default(PsuAuthRequest));
        /// <summary>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </summary>
        /// <remarks>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="authorizeRequest"></param>
        /// <returns></returns>
        void ToAspspGrantUsingPOST(string authId, Guid xRequestID, string X_XSRF_TOKEN, AuthorizeRequest authorizeRequest);

        /// <summary>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </summary>
        /// <remarks>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="authorizeRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ToAspspGrantUsingPOSTWithHttpInfo(string authId, Guid xRequestID, string X_XSRF_TOKEN, AuthorizeRequest authorizeRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUpdateConsentAuthorizationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Consent authorization is denied - consent is blocked. Closes this session and redirects the PSU back to the FinTechApi or close the application window. 
        /// </summary>
        /// <remarks>
        /// Closes this session and redirects the PSU back to the FinTechApi or close the application window. In any case, the session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="denyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DenyUsingPOSTAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, DenyRequest denyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Consent authorization is denied - consent is blocked. Closes this session and redirects the PSU back to the FinTechApi or close the application window. 
        /// </summary>
        /// <remarks>
        /// Closes this session and redirects the PSU back to the FinTechApi or close the application window. In any case, the session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="denyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DenyUsingPOSTWithHttpInfoAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, DenyRequest denyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generic challenge response end point for updating consent session with PSU authentication data while requesting remaining challenges for the ongoing authorization process. 
        /// </summary>
        /// <remarks>
        /// Update consent session with PSU auth data whereby requesting remaining challenges for the ongoing authorization process. Returns 202 if one should proceed to some other link. Link to follow is in &#39;Location&#39; header. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="redirectCode">Code used to retrieve a redirect session. This is generaly transported as a query parameter (optional)</param>
        /// <param name="psuAuthRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentAuth</returns>
        System.Threading.Tasks.Task<ConsentAuth> EmbeddedUsingPOSTAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, string redirectCode = default(string), PsuAuthRequest psuAuthRequest = default(PsuAuthRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generic challenge response end point for updating consent session with PSU authentication data while requesting remaining challenges for the ongoing authorization process. 
        /// </summary>
        /// <remarks>
        /// Update consent session with PSU auth data whereby requesting remaining challenges for the ongoing authorization process. Returns 202 if one should proceed to some other link. Link to follow is in &#39;Location&#39; header. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="redirectCode">Code used to retrieve a redirect session. This is generaly transported as a query parameter (optional)</param>
        /// <param name="psuAuthRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentAuth)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsentAuth>> EmbeddedUsingPOSTWithHttpInfoAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, string redirectCode = default(string), PsuAuthRequest psuAuthRequest = default(PsuAuthRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </summary>
        /// <remarks>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="authorizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ToAspspGrantUsingPOSTAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, AuthorizeRequest authorizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </summary>
        /// <remarks>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="authorizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ToAspspGrantUsingPOSTWithHttpInfoAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, AuthorizeRequest authorizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUpdateConsentAuthorizationApi : IUpdateConsentAuthorizationApiSync, IUpdateConsentAuthorizationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UpdateConsentAuthorizationApi : IUpdateConsentAuthorizationApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConsentAuthorizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UpdateConsentAuthorizationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConsentAuthorizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UpdateConsentAuthorizationApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConsentAuthorizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UpdateConsentAuthorizationApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConsentAuthorizationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UpdateConsentAuthorizationApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Consent authorization is denied - consent is blocked. Closes this session and redirects the PSU back to the FinTechApi or close the application window.  Closes this session and redirects the PSU back to the FinTechApi or close the application window. In any case, the session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="denyRequest"></param>
        /// <returns></returns>
        public void DenyUsingPOST(string authId, Guid xRequestID, string X_XSRF_TOKEN, DenyRequest denyRequest)
        {
            DenyUsingPOSTWithHttpInfo(authId, xRequestID, X_XSRF_TOKEN, denyRequest);
        }

        /// <summary>
        /// Consent authorization is denied - consent is blocked. Closes this session and redirects the PSU back to the FinTechApi or close the application window.  Closes this session and redirects the PSU back to the FinTechApi or close the application window. In any case, the session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="denyRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DenyUsingPOSTWithHttpInfo(string authId, Guid xRequestID, string X_XSRF_TOKEN, DenyRequest denyRequest)
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling UpdateConsentAuthorizationApi->DenyUsingPOST");

            // verify the required parameter 'X_XSRF_TOKEN' is set
            if (X_XSRF_TOKEN == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_XSRF_TOKEN' when calling UpdateConsentAuthorizationApi->DenyUsingPOST");

            // verify the required parameter 'denyRequest' is set
            if (denyRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'denyRequest' when calling UpdateConsentAuthorizationApi->DenyUsingPOST");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-XSRF-TOKEN", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_XSRF_TOKEN)); // header parameter
            localVarRequestOptions.Data = denyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/consent/{auth-id}/deny", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DenyUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Consent authorization is denied - consent is blocked. Closes this session and redirects the PSU back to the FinTechApi or close the application window.  Closes this session and redirects the PSU back to the FinTechApi or close the application window. In any case, the session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="denyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DenyUsingPOSTAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, DenyRequest denyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DenyUsingPOSTWithHttpInfoAsync(authId, xRequestID, X_XSRF_TOKEN, denyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Consent authorization is denied - consent is blocked. Closes this session and redirects the PSU back to the FinTechApi or close the application window.  Closes this session and redirects the PSU back to the FinTechApi or close the application window. In any case, the session of the user will be closed and cookies will be deleted with the response to this request. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="denyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DenyUsingPOSTWithHttpInfoAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, DenyRequest denyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling UpdateConsentAuthorizationApi->DenyUsingPOST");

            // verify the required parameter 'X_XSRF_TOKEN' is set
            if (X_XSRF_TOKEN == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_XSRF_TOKEN' when calling UpdateConsentAuthorizationApi->DenyUsingPOST");

            // verify the required parameter 'denyRequest' is set
            if (denyRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'denyRequest' when calling UpdateConsentAuthorizationApi->DenyUsingPOST");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-XSRF-TOKEN", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_XSRF_TOKEN)); // header parameter
            localVarRequestOptions.Data = denyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/consent/{auth-id}/deny", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DenyUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generic challenge response end point for updating consent session with PSU authentication data while requesting remaining challenges for the ongoing authorization process.  Update consent session with PSU auth data whereby requesting remaining challenges for the ongoing authorization process. Returns 202 if one should proceed to some other link. Link to follow is in &#39;Location&#39; header. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="redirectCode">Code used to retrieve a redirect session. This is generaly transported as a query parameter (optional)</param>
        /// <param name="psuAuthRequest"> (optional)</param>
        /// <returns>ConsentAuth</returns>
        public ConsentAuth EmbeddedUsingPOST(string authId, Guid xRequestID, string X_XSRF_TOKEN, string redirectCode = default(string), PsuAuthRequest psuAuthRequest = default(PsuAuthRequest))
        {
            Org.OpenAPITools.Client.ApiResponse<ConsentAuth> localVarResponse = EmbeddedUsingPOSTWithHttpInfo(authId, xRequestID, X_XSRF_TOKEN, redirectCode, psuAuthRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generic challenge response end point for updating consent session with PSU authentication data while requesting remaining challenges for the ongoing authorization process.  Update consent session with PSU auth data whereby requesting remaining challenges for the ongoing authorization process. Returns 202 if one should proceed to some other link. Link to follow is in &#39;Location&#39; header. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="redirectCode">Code used to retrieve a redirect session. This is generaly transported as a query parameter (optional)</param>
        /// <param name="psuAuthRequest"> (optional)</param>
        /// <returns>ApiResponse of ConsentAuth</returns>
        public Org.OpenAPITools.Client.ApiResponse<ConsentAuth> EmbeddedUsingPOSTWithHttpInfo(string authId, Guid xRequestID, string X_XSRF_TOKEN, string redirectCode = default(string), PsuAuthRequest psuAuthRequest = default(PsuAuthRequest))
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling UpdateConsentAuthorizationApi->EmbeddedUsingPOST");

            // verify the required parameter 'X_XSRF_TOKEN' is set
            if (X_XSRF_TOKEN == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_XSRF_TOKEN' when calling UpdateConsentAuthorizationApi->EmbeddedUsingPOST");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            if (redirectCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "redirectCode", redirectCode));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-XSRF-TOKEN", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_XSRF_TOKEN)); // header parameter
            localVarRequestOptions.Data = psuAuthRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ConsentAuth>("/v1/consent/{auth-id}/embedded", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmbeddedUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generic challenge response end point for updating consent session with PSU authentication data while requesting remaining challenges for the ongoing authorization process.  Update consent session with PSU auth data whereby requesting remaining challenges for the ongoing authorization process. Returns 202 if one should proceed to some other link. Link to follow is in &#39;Location&#39; header. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="redirectCode">Code used to retrieve a redirect session. This is generaly transported as a query parameter (optional)</param>
        /// <param name="psuAuthRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsentAuth</returns>
        public async System.Threading.Tasks.Task<ConsentAuth> EmbeddedUsingPOSTAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, string redirectCode = default(string), PsuAuthRequest psuAuthRequest = default(PsuAuthRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ConsentAuth> localVarResponse = await EmbeddedUsingPOSTWithHttpInfoAsync(authId, xRequestID, X_XSRF_TOKEN, redirectCode, psuAuthRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generic challenge response end point for updating consent session with PSU authentication data while requesting remaining challenges for the ongoing authorization process.  Update consent session with PSU auth data whereby requesting remaining challenges for the ongoing authorization process. Returns 202 if one should proceed to some other link. Link to follow is in &#39;Location&#39; header. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="redirectCode">Code used to retrieve a redirect session. This is generaly transported as a query parameter (optional)</param>
        /// <param name="psuAuthRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsentAuth)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ConsentAuth>> EmbeddedUsingPOSTWithHttpInfoAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, string redirectCode = default(string), PsuAuthRequest psuAuthRequest = default(PsuAuthRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling UpdateConsentAuthorizationApi->EmbeddedUsingPOST");

            // verify the required parameter 'X_XSRF_TOKEN' is set
            if (X_XSRF_TOKEN == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_XSRF_TOKEN' when calling UpdateConsentAuthorizationApi->EmbeddedUsingPOST");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            if (redirectCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "redirectCode", redirectCode));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-XSRF-TOKEN", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_XSRF_TOKEN)); // header parameter
            localVarRequestOptions.Data = psuAuthRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ConsentAuth>("/v1/consent/{auth-id}/embedded", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmbeddedUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP.  Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="authorizeRequest"></param>
        /// <returns></returns>
        public void ToAspspGrantUsingPOST(string authId, Guid xRequestID, string X_XSRF_TOKEN, AuthorizeRequest authorizeRequest)
        {
            ToAspspGrantUsingPOSTWithHttpInfo(authId, xRequestID, X_XSRF_TOKEN, authorizeRequest);
        }

        /// <summary>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP.  Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="authorizeRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ToAspspGrantUsingPOSTWithHttpInfo(string authId, Guid xRequestID, string X_XSRF_TOKEN, AuthorizeRequest authorizeRequest)
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling UpdateConsentAuthorizationApi->ToAspspGrantUsingPOST");

            // verify the required parameter 'X_XSRF_TOKEN' is set
            if (X_XSRF_TOKEN == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_XSRF_TOKEN' when calling UpdateConsentAuthorizationApi->ToAspspGrantUsingPOST");

            // verify the required parameter 'authorizeRequest' is set
            if (authorizeRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorizeRequest' when calling UpdateConsentAuthorizationApi->ToAspspGrantUsingPOST");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-XSRF-TOKEN", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_XSRF_TOKEN)); // header parameter
            localVarRequestOptions.Data = authorizeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/consent/{auth-id}/toAspsp/grant", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToAspspGrantUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP.  Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="authorizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ToAspspGrantUsingPOSTAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, AuthorizeRequest authorizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ToAspspGrantUsingPOSTWithHttpInfoAsync(authId, xRequestID, X_XSRF_TOKEN, authorizeRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP.  Provides the ConsentAuthorisationApi with the opportunity to redirect the PSU to the ASPSP. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authId">Used to distinguish between different consent authorization processes started by the same PSU. Also included in the corresponding cookie path to limit visibility of the consent cookie to the corresponding consent process. </param>
        /// <param name="xRequestID">Unique ID that identifies this request through common workflow. Shall be contained in HTTP Response as well. </param>
        /// <param name="X_XSRF_TOKEN">XSRF parameter used to validate a SessionCookie. The token matches the auth-id included in the requestpath and prefixing the cookie. </param>
        /// <param name="authorizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ToAspspGrantUsingPOSTWithHttpInfoAsync(string authId, Guid xRequestID, string X_XSRF_TOKEN, AuthorizeRequest authorizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authId' is set
            if (authId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authId' when calling UpdateConsentAuthorizationApi->ToAspspGrantUsingPOST");

            // verify the required parameter 'X_XSRF_TOKEN' is set
            if (X_XSRF_TOKEN == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'X_XSRF_TOKEN' when calling UpdateConsentAuthorizationApi->ToAspspGrantUsingPOST");

            // verify the required parameter 'authorizeRequest' is set
            if (authorizeRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'authorizeRequest' when calling UpdateConsentAuthorizationApi->ToAspspGrantUsingPOST");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("auth-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Request-ID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xRequestID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-XSRF-TOKEN", Org.OpenAPITools.Client.ClientUtils.ParameterToString(X_XSRF_TOKEN)); // header parameter
            localVarRequestOptions.Data = authorizeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/consent/{auth-id}/toAspsp/grant", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToAspspGrantUsingPOST", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
