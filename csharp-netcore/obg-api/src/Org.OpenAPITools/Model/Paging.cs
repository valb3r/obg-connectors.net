/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Container for pagination information 
    /// </summary>
    [DataContract(Name = "paging")]
    public partial class Paging : IEquatable<Paging>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Paging" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Paging() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Paging" /> class.
        /// </summary>
        /// <param name="page">Current page number (required).</param>
        /// <param name="pageSize">Current page size (number of entries in this page) (required).</param>
        /// <param name="pageCount">Total number of pages (required).</param>
        /// <param name="totalCount">Total number of entries across all pages (required).</param>
        public Paging(int page = default(int), int pageSize = default(int), int pageCount = default(int), long totalCount = default(long))
        {
            this.Page = page;
            this.PageSize = pageSize;
            this.PageCount = pageCount;
            this.TotalCount = totalCount;
        }

        /// <summary>
        /// Current page number
        /// </summary>
        /// <value>Current page number</value>
        [DataMember(Name = "page", IsRequired = true, EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// Current page size (number of entries in this page)
        /// </summary>
        /// <value>Current page size (number of entries in this page)</value>
        [DataMember(Name = "pageSize", IsRequired = true, EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Total number of pages
        /// </summary>
        /// <value>Total number of pages</value>
        [DataMember(Name = "pageCount", IsRequired = true, EmitDefaultValue = false)]
        public int PageCount { get; set; }

        /// <summary>
        /// Total number of entries across all pages
        /// </summary>
        /// <value>Total number of entries across all pages</value>
        [DataMember(Name = "totalCount", IsRequired = true, EmitDefaultValue = false)]
        public long TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Paging {\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Paging);
        }

        /// <summary>
        /// Returns true if Paging instances are equal
        /// </summary>
        /// <param name="input">Instance of Paging to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Paging input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                ) && 
                (
                    this.PageCount == input.PageCount ||
                    this.PageCount.Equals(input.PageCount)
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    this.TotalCount.Equals(input.TotalCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Page.GetHashCode();
                hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                hashCode = hashCode * 59 + this.PageCount.GetHashCode();
                hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Page (int) minimum
            if(this.Page < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page, must be a value greater than or equal to 0.", new [] { "Page" });
            }

            // PageSize (int) minimum
            if(this.PageSize < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PageSize, must be a value greater than or equal to 1.", new [] { "PageSize" });
            }

            // PageCount (int) minimum
            if(this.PageCount < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PageCount, must be a value greater than or equal to 0.", new [] { "PageCount" });
            }

            // TotalCount (long) minimum
            if(this.TotalCount < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalCount, must be a value greater than or equal to 0.", new [] { "TotalCount" });
            }

            yield break;
        }
    }

}
