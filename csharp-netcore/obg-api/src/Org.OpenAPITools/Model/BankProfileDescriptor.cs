/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BankProfileDescriptor
    /// </summary>
    [DataContract(Name = "bankProfileDescriptor")]
    public partial class BankProfileDescriptor : IEquatable<BankProfileDescriptor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankProfileDescriptor" /> class.
        /// </summary>
        /// <param name="bankName">bankName.</param>
        /// <param name="bic">bic.</param>
        /// <param name="bankUuid">bankUuid.</param>
        /// <param name="serviceList">serviceList.</param>
        /// <param name="consentSupportByService">consentSupportByService.</param>
        public BankProfileDescriptor(string bankName = default(string), string bic = default(string), string bankUuid = default(string), List<string> serviceList = default(List<string>), Dictionary<string, string> consentSupportByService = default(Dictionary<string, string>))
        {
            this.BankName = bankName;
            this.Bic = bic;
            this.BankUuid = bankUuid;
            this.ServiceList = serviceList;
            this.ConsentSupportByService = consentSupportByService;
        }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name = "bankName", EmitDefaultValue = false)]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or Sets Bic
        /// </summary>
        [DataMember(Name = "bic", EmitDefaultValue = false)]
        public string Bic { get; set; }

        /// <summary>
        /// Gets or Sets BankUuid
        /// </summary>
        [DataMember(Name = "bankUuid", EmitDefaultValue = false)]
        public string BankUuid { get; set; }

        /// <summary>
        /// Gets or Sets ServiceList
        /// </summary>
        [DataMember(Name = "serviceList", EmitDefaultValue = false)]
        public List<string> ServiceList { get; set; }

        /// <summary>
        /// Gets or Sets ConsentSupportByService
        /// </summary>
        [DataMember(Name = "consentSupportByService", EmitDefaultValue = false)]
        public Dictionary<string, string> ConsentSupportByService { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankProfileDescriptor {\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("  BankUuid: ").Append(BankUuid).Append("\n");
            sb.Append("  ServiceList: ").Append(ServiceList).Append("\n");
            sb.Append("  ConsentSupportByService: ").Append(ConsentSupportByService).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankProfileDescriptor);
        }

        /// <summary>
        /// Returns true if BankProfileDescriptor instances are equal
        /// </summary>
        /// <param name="input">Instance of BankProfileDescriptor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankProfileDescriptor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.Bic == input.Bic ||
                    (this.Bic != null &&
                    this.Bic.Equals(input.Bic))
                ) && 
                (
                    this.BankUuid == input.BankUuid ||
                    (this.BankUuid != null &&
                    this.BankUuid.Equals(input.BankUuid))
                ) && 
                (
                    this.ServiceList == input.ServiceList ||
                    this.ServiceList != null &&
                    input.ServiceList != null &&
                    this.ServiceList.SequenceEqual(input.ServiceList)
                ) && 
                (
                    this.ConsentSupportByService == input.ConsentSupportByService ||
                    this.ConsentSupportByService != null &&
                    input.ConsentSupportByService != null &&
                    this.ConsentSupportByService.SequenceEqual(input.ConsentSupportByService)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.Bic != null)
                    hashCode = hashCode * 59 + this.Bic.GetHashCode();
                if (this.BankUuid != null)
                    hashCode = hashCode * 59 + this.BankUuid.GetHashCode();
                if (this.ServiceList != null)
                    hashCode = hashCode * 59 + this.ServiceList.GetHashCode();
                if (this.ConsentSupportByService != null)
                    hashCode = hashCode * 59 + this.ConsentSupportByService.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
