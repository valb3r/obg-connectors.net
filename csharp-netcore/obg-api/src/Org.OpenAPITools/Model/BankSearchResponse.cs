/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BankSearchResponse
    /// </summary>
    [DataContract(Name = "bankSearchResponse")]
    public partial class BankSearchResponse : IEquatable<BankSearchResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankSearchResponse" /> class.
        /// </summary>
        /// <param name="bankDescriptor">bankDescriptor.</param>
        /// <param name="keyword">The bank search input string.</param>
        /// <param name="start">The index of the first result.</param>
        /// <param name="max">The max number of entries to return with the response..</param>
        /// <param name="total">The total count of entities found for the given search input..</param>
        public BankSearchResponse(List<BankDescriptor> bankDescriptor = default(List<BankDescriptor>), String keyword = default(String), int start = default(int), int max = default(int), int total = default(int))
        {
            this.BankDescriptor = bankDescriptor;
            this.Keyword = keyword;
            this.Start = start;
            this.Max = max;
            this.Total = total;
        }

        /// <summary>
        /// Gets or Sets BankDescriptor
        /// </summary>
        [DataMember(Name = "bankDescriptor", EmitDefaultValue = false)]
        public List<BankDescriptor> BankDescriptor { get; set; }

        /// <summary>
        /// The bank search input string
        /// </summary>
        /// <value>The bank search input string</value>
        [DataMember(Name = "keyword", EmitDefaultValue = false)]
        public String Keyword { get; set; }

        /// <summary>
        /// The index of the first result
        /// </summary>
        /// <value>The index of the first result</value>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public int Start { get; set; }

        /// <summary>
        /// The max number of entries to return with the response.
        /// </summary>
        /// <value>The max number of entries to return with the response.</value>
        [DataMember(Name = "max", EmitDefaultValue = false)]
        public int Max { get; set; }

        /// <summary>
        /// The total count of entities found for the given search input.
        /// </summary>
        /// <value>The total count of entities found for the given search input.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public int Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankSearchResponse {\n");
            sb.Append("  BankDescriptor: ").Append(BankDescriptor).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankSearchResponse);
        }

        /// <summary>
        /// Returns true if BankSearchResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BankSearchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankSearchResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BankDescriptor == input.BankDescriptor ||
                    this.BankDescriptor != null &&
                    input.BankDescriptor != null &&
                    this.BankDescriptor.SequenceEqual(input.BankDescriptor)
                ) && 
                (
                    this.Keyword == input.Keyword ||
                    (this.Keyword != null &&
                    this.Keyword.Equals(input.Keyword))
                ) && 
                (
                    this.Start == input.Start ||
                    this.Start.Equals(input.Start)
                ) && 
                (
                    this.Max == input.Max ||
                    this.Max.Equals(input.Max)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankDescriptor != null)
                    hashCode = hashCode * 59 + this.BankDescriptor.GetHashCode();
                if (this.Keyword != null)
                    hashCode = hashCode * 59 + this.Keyword.GetHashCode();
                hashCode = hashCode * 59 + this.Start.GetHashCode();
                hashCode = hashCode * 59 + this.Max.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
