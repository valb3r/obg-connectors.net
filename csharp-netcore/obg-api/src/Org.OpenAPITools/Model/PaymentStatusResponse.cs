/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Body of the response for a successful payment initiation status request in case of an JSON based endpoint.
    /// </summary>
    [DataContract(Name = "paymentStatusResponse")]
    public partial class PaymentStatusResponse : IEquatable<PaymentStatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentStatusResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentStatusResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentStatusResponse" /> class.
        /// </summary>
        /// <param name="transactionStatus">The transaction status (required).</param>
        /// <param name="fundsAvailable">Equals true if sufficient funds are available at the time of the request, false otherwise..</param>
        /// <param name="psuMessage">Text to be displayed to the PSU..</param>
        /// <param name="createdAt">Payment creation time according to OpenBanking database.</param>
        public PaymentStatusResponse(string transactionStatus = default(string), bool fundsAvailable = default(bool), string psuMessage = default(string), DateTime createdAt = default(DateTime))
        {
            // to ensure "transactionStatus" is required (not null)
            this.TransactionStatus = transactionStatus ?? throw new ArgumentNullException("transactionStatus is a required property for PaymentStatusResponse and cannot be null");
            this.FundsAvailable = fundsAvailable;
            this.PsuMessage = psuMessage;
            this.CreatedAt = createdAt;
        }

        /// <summary>
        /// The transaction status
        /// </summary>
        /// <value>The transaction status</value>
        [DataMember(Name = "transactionStatus", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionStatus { get; set; }

        /// <summary>
        /// Equals true if sufficient funds are available at the time of the request, false otherwise.
        /// </summary>
        /// <value>Equals true if sufficient funds are available at the time of the request, false otherwise.</value>
        [DataMember(Name = "fundsAvailable", EmitDefaultValue = true)]
        public bool FundsAvailable { get; set; }

        /// <summary>
        /// Text to be displayed to the PSU.
        /// </summary>
        /// <value>Text to be displayed to the PSU.</value>
        [DataMember(Name = "psuMessage", EmitDefaultValue = false)]
        public string PsuMessage { get; set; }

        /// <summary>
        /// Payment creation time according to OpenBanking database
        /// </summary>
        /// <value>Payment creation time according to OpenBanking database</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentStatusResponse {\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  FundsAvailable: ").Append(FundsAvailable).Append("\n");
            sb.Append("  PsuMessage: ").Append(PsuMessage).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentStatusResponse);
        }

        /// <summary>
        /// Returns true if PaymentStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentStatusResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    (this.TransactionStatus != null &&
                    this.TransactionStatus.Equals(input.TransactionStatus))
                ) && 
                (
                    this.FundsAvailable == input.FundsAvailable ||
                    this.FundsAvailable.Equals(input.FundsAvailable)
                ) && 
                (
                    this.PsuMessage == input.PsuMessage ||
                    (this.PsuMessage != null &&
                    this.PsuMessage.Equals(input.PsuMessage))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionStatus != null)
                    hashCode = hashCode * 59 + this.TransactionStatus.GetHashCode();
                hashCode = hashCode * 59 + this.FundsAvailable.GetHashCode();
                if (this.PsuMessage != null)
                    hashCode = hashCode * 59 + this.PsuMessage.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PsuMessage (string) maxLength
            if(this.PsuMessage != null && this.PsuMessage.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PsuMessage, length must be less than 500.", new [] { "PsuMessage" });
            }

            yield break;
        }
    }

}
