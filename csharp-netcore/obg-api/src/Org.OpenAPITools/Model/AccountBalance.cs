/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AccountBalance
    /// </summary>
    [DataContract(Name = "AccountBalance")]
    public partial class AccountBalance : IEquatable<AccountBalance>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BalanceType
        /// </summary>
        [DataMember(Name = "balanceType", EmitDefaultValue = false)]
        public BalanceType? BalanceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountBalance" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="balanceType">balanceType.</param>
        /// <param name="iban">iban.</param>
        /// <param name="lastChangeDateTime">lastChangeDateTime.</param>
        /// <param name="lastCommittedTransaction">lastCommittedTransaction.</param>
        /// <param name="referenceDate">referenceDate.</param>
        public AccountBalance(Amount amount = default(Amount), BalanceType? balanceType = default(BalanceType?), string iban = default(string), DateTime lastChangeDateTime = default(DateTime), string lastCommittedTransaction = default(string), DateTime referenceDate = default(DateTime))
        {
            this.Amount = amount;
            this.BalanceType = balanceType;
            this.Iban = iban;
            this.LastChangeDateTime = lastChangeDateTime;
            this.LastCommittedTransaction = lastCommittedTransaction;
            this.ReferenceDate = referenceDate;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        [DataMember(Name = "iban", EmitDefaultValue = false)]
        public string Iban { get; set; }

        /// <summary>
        /// Gets or Sets LastChangeDateTime
        /// </summary>
        [DataMember(Name = "lastChangeDateTime", EmitDefaultValue = false)]
        public DateTime LastChangeDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LastCommittedTransaction
        /// </summary>
        [DataMember(Name = "lastCommittedTransaction", EmitDefaultValue = false)]
        public string LastCommittedTransaction { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceDate
        /// </summary>
        [DataMember(Name = "referenceDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ReferenceDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountBalance {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BalanceType: ").Append(BalanceType).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  LastChangeDateTime: ").Append(LastChangeDateTime).Append("\n");
            sb.Append("  LastCommittedTransaction: ").Append(LastCommittedTransaction).Append("\n");
            sb.Append("  ReferenceDate: ").Append(ReferenceDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountBalance);
        }

        /// <summary>
        /// Returns true if AccountBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountBalance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BalanceType == input.BalanceType ||
                    this.BalanceType.Equals(input.BalanceType)
                ) && 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                ) && 
                (
                    this.LastChangeDateTime == input.LastChangeDateTime ||
                    (this.LastChangeDateTime != null &&
                    this.LastChangeDateTime.Equals(input.LastChangeDateTime))
                ) && 
                (
                    this.LastCommittedTransaction == input.LastCommittedTransaction ||
                    (this.LastCommittedTransaction != null &&
                    this.LastCommittedTransaction.Equals(input.LastCommittedTransaction))
                ) && 
                (
                    this.ReferenceDate == input.ReferenceDate ||
                    (this.ReferenceDate != null &&
                    this.ReferenceDate.Equals(input.ReferenceDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.BalanceType.GetHashCode();
                if (this.Iban != null)
                    hashCode = hashCode * 59 + this.Iban.GetHashCode();
                if (this.LastChangeDateTime != null)
                    hashCode = hashCode * 59 + this.LastChangeDateTime.GetHashCode();
                if (this.LastCommittedTransaction != null)
                    hashCode = hashCode * 59 + this.LastCommittedTransaction.GetHashCode();
                if (this.ReferenceDate != null)
                    hashCode = hashCode * 59 + this.ReferenceDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
