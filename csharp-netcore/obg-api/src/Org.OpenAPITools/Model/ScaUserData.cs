/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ScaUserData
    /// </summary>
    [DataContract(Name = "ScaUserData")]
    public partial class ScaUserData : IEquatable<ScaUserData>, IValidatableObject
    {
        /// <summary>
        /// Defines ScaMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScaMethodEnum
        {
            /// <summary>
            /// Enum EMAIL for value: EMAIL
            /// </summary>
            [EnumMember(Value = "EMAIL")]
            EMAIL = 1,

            /// <summary>
            /// Enum MOBILE for value: MOBILE
            /// </summary>
            [EnumMember(Value = "MOBILE")]
            MOBILE = 2,

            /// <summary>
            /// Enum CHIPOTP for value: CHIP_OTP
            /// </summary>
            [EnumMember(Value = "CHIP_OTP")]
            CHIPOTP = 3,

            /// <summary>
            /// Enum PHOTOOTP for value: PHOTO_OTP
            /// </summary>
            [EnumMember(Value = "PHOTO_OTP")]
            PHOTOOTP = 4,

            /// <summary>
            /// Enum PUSHOTP for value: PUSH_OTP
            /// </summary>
            [EnumMember(Value = "PUSH_OTP")]
            PUSHOTP = 5,

            /// <summary>
            /// Enum SMSOTP for value: SMS_OTP
            /// </summary>
            [EnumMember(Value = "SMS_OTP")]
            SMSOTP = 6,

            /// <summary>
            /// Enum APPOTP for value: APP_OTP
            /// </summary>
            [EnumMember(Value = "APP_OTP")]
            APPOTP = 7

        }


        /// <summary>
        /// Gets or Sets ScaMethod
        /// </summary>
        [DataMember(Name = "scaMethod", EmitDefaultValue = false)]
        public ScaMethodEnum? ScaMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScaUserData" /> class.
        /// </summary>
        /// <param name="decoupled">decoupled.</param>
        /// <param name="id">id.</param>
        /// <param name="methodValue">methodValue.</param>
        /// <param name="scaMethod">scaMethod.</param>
        /// <param name="staticTan">staticTan.</param>
        /// <param name="usesStaticTan">usesStaticTan.</param>
        public ScaUserData(bool decoupled = default(bool), string id = default(string), string methodValue = default(string), ScaMethodEnum? scaMethod = default(ScaMethodEnum?), string staticTan = default(string), bool usesStaticTan = default(bool))
        {
            this.Decoupled = decoupled;
            this.Id = id;
            this.MethodValue = methodValue;
            this.ScaMethod = scaMethod;
            this.StaticTan = staticTan;
            this.UsesStaticTan = usesStaticTan;
        }

        /// <summary>
        /// Gets or Sets Decoupled
        /// </summary>
        [DataMember(Name = "decoupled", EmitDefaultValue = true)]
        public bool Decoupled { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets MethodValue
        /// </summary>
        [DataMember(Name = "methodValue", EmitDefaultValue = false)]
        public string MethodValue { get; set; }

        /// <summary>
        /// Gets or Sets StaticTan
        /// </summary>
        [DataMember(Name = "staticTan", EmitDefaultValue = false)]
        public string StaticTan { get; set; }

        /// <summary>
        /// Gets or Sets UsesStaticTan
        /// </summary>
        [DataMember(Name = "usesStaticTan", EmitDefaultValue = true)]
        public bool UsesStaticTan { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScaUserData {\n");
            sb.Append("  Decoupled: ").Append(Decoupled).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MethodValue: ").Append(MethodValue).Append("\n");
            sb.Append("  ScaMethod: ").Append(ScaMethod).Append("\n");
            sb.Append("  StaticTan: ").Append(StaticTan).Append("\n");
            sb.Append("  UsesStaticTan: ").Append(UsesStaticTan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScaUserData);
        }

        /// <summary>
        /// Returns true if ScaUserData instances are equal
        /// </summary>
        /// <param name="input">Instance of ScaUserData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScaUserData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Decoupled == input.Decoupled ||
                    this.Decoupled.Equals(input.Decoupled)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MethodValue == input.MethodValue ||
                    (this.MethodValue != null &&
                    this.MethodValue.Equals(input.MethodValue))
                ) && 
                (
                    this.ScaMethod == input.ScaMethod ||
                    this.ScaMethod.Equals(input.ScaMethod)
                ) && 
                (
                    this.StaticTan == input.StaticTan ||
                    (this.StaticTan != null &&
                    this.StaticTan.Equals(input.StaticTan))
                ) && 
                (
                    this.UsesStaticTan == input.UsesStaticTan ||
                    this.UsesStaticTan.Equals(input.UsesStaticTan)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Decoupled.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MethodValue != null)
                    hashCode = hashCode * 59 + this.MethodValue.GetHashCode();
                hashCode = hashCode * 59 + this.ScaMethod.GetHashCode();
                if (this.StaticTan != null)
                    hashCode = hashCode * 59 + this.StaticTan.GetHashCode();
                hashCode = hashCode * 59 + this.UsesStaticTan.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
