/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Challege data for SCA like OpticTAN image
    /// </summary>
    [DataContract(Name = "ChallengeData")]
    public partial class ChallengeData : IEquatable<ChallengeData>, IValidatableObject
    {
        /// <summary>
        /// Defines OtpFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OtpFormatEnum
        {
            /// <summary>
            /// Enum CHARACTERS for value: CHARACTERS
            /// </summary>
            [EnumMember(Value = "CHARACTERS")]
            CHARACTERS = 1,

            /// <summary>
            /// Enum INTEGER for value: INTEGER
            /// </summary>
            [EnumMember(Value = "INTEGER")]
            INTEGER = 2

        }


        /// <summary>
        /// Gets or Sets OtpFormat
        /// </summary>
        [DataMember(Name = "otpFormat", EmitDefaultValue = false)]
        public OtpFormatEnum? OtpFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengeData" /> class.
        /// </summary>
        /// <param name="image">image.</param>
        /// <param name="data">data.</param>
        /// <param name="imageLink">imageLink.</param>
        /// <param name="otpMaxLength">otpMaxLength.</param>
        /// <param name="otpFormat">otpFormat.</param>
        /// <param name="additionalInformation">additionalInformation.</param>
        public ChallengeData(byte[] image = default(byte[]), List<string> data = default(List<string>), string imageLink = default(string), int otpMaxLength = default(int), OtpFormatEnum? otpFormat = default(OtpFormatEnum?), string additionalInformation = default(string))
        {
            this.Image = image;
            this.Data = data;
            this.ImageLink = imageLink;
            this.OtpMaxLength = otpMaxLength;
            this.OtpFormat = otpFormat;
            this.AdditionalInformation = additionalInformation;
        }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public byte[] Image { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public List<string> Data { get; set; }

        /// <summary>
        /// Gets or Sets ImageLink
        /// </summary>
        [DataMember(Name = "imageLink", EmitDefaultValue = false)]
        public string ImageLink { get; set; }

        /// <summary>
        /// Gets or Sets OtpMaxLength
        /// </summary>
        [DataMember(Name = "otpMaxLength", EmitDefaultValue = false)]
        public int OtpMaxLength { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInformation
        /// </summary>
        [DataMember(Name = "additionalInformation", EmitDefaultValue = false)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChallengeData {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  ImageLink: ").Append(ImageLink).Append("\n");
            sb.Append("  OtpMaxLength: ").Append(OtpMaxLength).Append("\n");
            sb.Append("  OtpFormat: ").Append(OtpFormat).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChallengeData);
        }

        /// <summary>
        /// Returns true if ChallengeData instances are equal
        /// </summary>
        /// <param name="input">Instance of ChallengeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChallengeData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.ImageLink == input.ImageLink ||
                    (this.ImageLink != null &&
                    this.ImageLink.Equals(input.ImageLink))
                ) && 
                (
                    this.OtpMaxLength == input.OtpMaxLength ||
                    this.OtpMaxLength.Equals(input.OtpMaxLength)
                ) && 
                (
                    this.OtpFormat == input.OtpFormat ||
                    this.OtpFormat.Equals(input.OtpFormat)
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.ImageLink != null)
                    hashCode = hashCode * 59 + this.ImageLink.GetHashCode();
                hashCode = hashCode * 59 + this.OtpMaxLength.GetHashCode();
                hashCode = hashCode * 59 + this.OtpFormat.GetHashCode();
                if (this.AdditionalInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
