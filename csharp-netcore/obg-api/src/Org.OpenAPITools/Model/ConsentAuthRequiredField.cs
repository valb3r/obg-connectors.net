/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Fields that are required to be filled in order to authorize consent
    /// </summary>
    [DataContract(Name = "ConsentAuthRequiredField")]
    public partial class ConsentAuthRequiredField : IEquatable<ConsentAuthRequiredField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsentAuthRequiredField" /> class.
        /// </summary>
        /// <param name="type">Field data type - boolean, string, etc..</param>
        /// <param name="scope">Scope of the field..</param>
        /// <param name="code">Field code - what does the field mean..</param>
        /// <param name="captionMessage">Custom message that describes field meaning.</param>
        public ConsentAuthRequiredField(string type = default(string), string scope = default(string), string code = default(string), string captionMessage = default(string))
        {
            this.Type = type;
            this.Scope = scope;
            this.Code = code;
            this.CaptionMessage = captionMessage;
        }

        /// <summary>
        /// Field data type - boolean, string, etc.
        /// </summary>
        /// <value>Field data type - boolean, string, etc.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Scope of the field.
        /// </summary>
        /// <value>Scope of the field.</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// Field code - what does the field mean.
        /// </summary>
        /// <value>Field code - what does the field mean.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Custom message that describes field meaning
        /// </summary>
        /// <value>Custom message that describes field meaning</value>
        [DataMember(Name = "captionMessage", EmitDefaultValue = false)]
        public string CaptionMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsentAuthRequiredField {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CaptionMessage: ").Append(CaptionMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsentAuthRequiredField);
        }

        /// <summary>
        /// Returns true if ConsentAuthRequiredField instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsentAuthRequiredField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsentAuthRequiredField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CaptionMessage == input.CaptionMessage ||
                    (this.CaptionMessage != null &&
                    this.CaptionMessage.Equals(input.CaptionMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.CaptionMessage != null)
                    hashCode = hashCode * 59 + this.CaptionMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
