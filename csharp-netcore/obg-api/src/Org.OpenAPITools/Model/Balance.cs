/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A balance 
    /// </summary>
    [DataContract(Name = "balance")]
    public partial class Balance : IEquatable<Balance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Balance" /> class.
        /// </summary>
        /// <param name="balanceAmount">balanceAmount.</param>
        /// <param name="balanceType">balanceType.</param>
        /// <param name="lastChangedDateTime">lastChangedDateTime.</param>
        /// <param name="referenceDate">referenceDate.</param>
        public Balance(Amount1 balanceAmount = default(Amount1), string balanceType = default(string), DateTime lastChangedDateTime = default(DateTime), string referenceDate = default(string))
        {
            this.BalanceAmount = balanceAmount;
            this.BalanceType = balanceType;
            this.LastChangedDateTime = lastChangedDateTime;
            this.ReferenceDate = referenceDate;
        }

        /// <summary>
        /// Gets or Sets BalanceAmount
        /// </summary>
        [DataMember(Name = "balanceAmount", EmitDefaultValue = false)]
        public Amount1 BalanceAmount { get; set; }

        /// <summary>
        /// Gets or Sets BalanceType
        /// </summary>
        [DataMember(Name = "balanceType", EmitDefaultValue = false)]
        public string BalanceType { get; set; }

        /// <summary>
        /// Gets or Sets LastChangedDateTime
        /// </summary>
        [DataMember(Name = "lastChangedDateTime", EmitDefaultValue = false)]
        public DateTime LastChangedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceDate
        /// </summary>
        [DataMember(Name = "referenceDate", EmitDefaultValue = false)]
        public string ReferenceDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Balance {\n");
            sb.Append("  BalanceAmount: ").Append(BalanceAmount).Append("\n");
            sb.Append("  BalanceType: ").Append(BalanceType).Append("\n");
            sb.Append("  LastChangedDateTime: ").Append(LastChangedDateTime).Append("\n");
            sb.Append("  ReferenceDate: ").Append(ReferenceDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Balance);
        }

        /// <summary>
        /// Returns true if Balance instances are equal
        /// </summary>
        /// <param name="input">Instance of Balance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Balance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BalanceAmount == input.BalanceAmount ||
                    (this.BalanceAmount != null &&
                    this.BalanceAmount.Equals(input.BalanceAmount))
                ) && 
                (
                    this.BalanceType == input.BalanceType ||
                    (this.BalanceType != null &&
                    this.BalanceType.Equals(input.BalanceType))
                ) && 
                (
                    this.LastChangedDateTime == input.LastChangedDateTime ||
                    (this.LastChangedDateTime != null &&
                    this.LastChangedDateTime.Equals(input.LastChangedDateTime))
                ) && 
                (
                    this.ReferenceDate == input.ReferenceDate ||
                    (this.ReferenceDate != null &&
                    this.ReferenceDate.Equals(input.ReferenceDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BalanceAmount != null)
                    hashCode = hashCode * 59 + this.BalanceAmount.GetHashCode();
                if (this.BalanceType != null)
                    hashCode = hashCode * 59 + this.BalanceType.GetHashCode();
                if (this.LastChangedDateTime != null)
                    hashCode = hashCode * 59 + this.LastChangedDateTime.GetHashCode();
                if (this.ReferenceDate != null)
                    hashCode = hashCode * 59 + this.ReferenceDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
