/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SinglePayment
    /// </summary>
    [DataContract(Name = "SinglePayment")]
    public partial class SinglePayment : IEquatable<SinglePayment>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PaymentProduct
        /// </summary>
        [DataMember(Name = "paymentProduct", EmitDefaultValue = false)]
        public PaymentProduct? PaymentProduct { get; set; }

        /// <summary>
        /// Gets or Sets PaymentStatus
        /// </summary>
        [DataMember(Name = "paymentStatus", EmitDefaultValue = false)]
        public PaymentStatus? PaymentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SinglePayment" /> class.
        /// </summary>
        /// <param name="creditorAccount">creditorAccount.</param>
        /// <param name="creditorAddress">creditorAddress.</param>
        /// <param name="creditorAgent">creditorAgent.</param>
        /// <param name="creditorName">creditorName.</param>
        /// <param name="debtorAccount">debtorAccount.</param>
        /// <param name="endToEndIdentification">endToEndIdentification.</param>
        /// <param name="instructedAmount">instructedAmount.</param>
        /// <param name="paymentId">paymentId.</param>
        /// <param name="paymentProduct">paymentProduct.</param>
        /// <param name="paymentStatus">paymentStatus.</param>
        /// <param name="remittanceInformationUnstructured">remittanceInformationUnstructured.</param>
        /// <param name="requestedExecutionDate">requestedExecutionDate.</param>
        /// <param name="requestedExecutionTime">requestedExecutionTime.</param>
        public SinglePayment(AccountReference creditorAccount = default(AccountReference), Address creditorAddress = default(Address), string creditorAgent = default(string), string creditorName = default(string), AccountReference debtorAccount = default(AccountReference), string endToEndIdentification = default(string), Amount instructedAmount = default(Amount), string paymentId = default(string), PaymentProduct? paymentProduct = default(PaymentProduct?), PaymentStatus? paymentStatus = default(PaymentStatus?), string remittanceInformationUnstructured = default(string), DateTime requestedExecutionDate = default(DateTime), string requestedExecutionTime = default(string))
        {
            this.CreditorAccount = creditorAccount;
            this.CreditorAddress = creditorAddress;
            this.CreditorAgent = creditorAgent;
            this.CreditorName = creditorName;
            this.DebtorAccount = debtorAccount;
            this.EndToEndIdentification = endToEndIdentification;
            this.InstructedAmount = instructedAmount;
            this.PaymentId = paymentId;
            this.PaymentProduct = paymentProduct;
            this.PaymentStatus = paymentStatus;
            this.RemittanceInformationUnstructured = remittanceInformationUnstructured;
            this.RequestedExecutionDate = requestedExecutionDate;
            this.RequestedExecutionTime = requestedExecutionTime;
        }

        /// <summary>
        /// Gets or Sets CreditorAccount
        /// </summary>
        [DataMember(Name = "creditorAccount", EmitDefaultValue = false)]
        public AccountReference CreditorAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAddress
        /// </summary>
        [DataMember(Name = "creditorAddress", EmitDefaultValue = false)]
        public Address CreditorAddress { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAgent
        /// </summary>
        [DataMember(Name = "creditorAgent", EmitDefaultValue = false)]
        public string CreditorAgent { get; set; }

        /// <summary>
        /// Gets or Sets CreditorName
        /// </summary>
        [DataMember(Name = "creditorName", EmitDefaultValue = false)]
        public string CreditorName { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAccount
        /// </summary>
        [DataMember(Name = "debtorAccount", EmitDefaultValue = false)]
        public AccountReference DebtorAccount { get; set; }

        /// <summary>
        /// Gets or Sets EndToEndIdentification
        /// </summary>
        [DataMember(Name = "endToEndIdentification", EmitDefaultValue = false)]
        public string EndToEndIdentification { get; set; }

        /// <summary>
        /// Gets or Sets InstructedAmount
        /// </summary>
        [DataMember(Name = "instructedAmount", EmitDefaultValue = false)]
        public Amount InstructedAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentId
        /// </summary>
        [DataMember(Name = "paymentId", EmitDefaultValue = false)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Gets or Sets RemittanceInformationUnstructured
        /// </summary>
        [DataMember(Name = "remittanceInformationUnstructured", EmitDefaultValue = false)]
        public string RemittanceInformationUnstructured { get; set; }

        /// <summary>
        /// Gets or Sets RequestedExecutionDate
        /// </summary>
        [DataMember(Name = "requestedExecutionDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime RequestedExecutionDate { get; set; }

        /// <summary>
        /// Gets or Sets RequestedExecutionTime
        /// </summary>
        [DataMember(Name = "requestedExecutionTime", EmitDefaultValue = false)]
        public string RequestedExecutionTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SinglePayment {\n");
            sb.Append("  CreditorAccount: ").Append(CreditorAccount).Append("\n");
            sb.Append("  CreditorAddress: ").Append(CreditorAddress).Append("\n");
            sb.Append("  CreditorAgent: ").Append(CreditorAgent).Append("\n");
            sb.Append("  CreditorName: ").Append(CreditorName).Append("\n");
            sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
            sb.Append("  EndToEndIdentification: ").Append(EndToEndIdentification).Append("\n");
            sb.Append("  InstructedAmount: ").Append(InstructedAmount).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  PaymentProduct: ").Append(PaymentProduct).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  RemittanceInformationUnstructured: ").Append(RemittanceInformationUnstructured).Append("\n");
            sb.Append("  RequestedExecutionDate: ").Append(RequestedExecutionDate).Append("\n");
            sb.Append("  RequestedExecutionTime: ").Append(RequestedExecutionTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SinglePayment);
        }

        /// <summary>
        /// Returns true if SinglePayment instances are equal
        /// </summary>
        /// <param name="input">Instance of SinglePayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SinglePayment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreditorAccount == input.CreditorAccount ||
                    (this.CreditorAccount != null &&
                    this.CreditorAccount.Equals(input.CreditorAccount))
                ) && 
                (
                    this.CreditorAddress == input.CreditorAddress ||
                    (this.CreditorAddress != null &&
                    this.CreditorAddress.Equals(input.CreditorAddress))
                ) && 
                (
                    this.CreditorAgent == input.CreditorAgent ||
                    (this.CreditorAgent != null &&
                    this.CreditorAgent.Equals(input.CreditorAgent))
                ) && 
                (
                    this.CreditorName == input.CreditorName ||
                    (this.CreditorName != null &&
                    this.CreditorName.Equals(input.CreditorName))
                ) && 
                (
                    this.DebtorAccount == input.DebtorAccount ||
                    (this.DebtorAccount != null &&
                    this.DebtorAccount.Equals(input.DebtorAccount))
                ) && 
                (
                    this.EndToEndIdentification == input.EndToEndIdentification ||
                    (this.EndToEndIdentification != null &&
                    this.EndToEndIdentification.Equals(input.EndToEndIdentification))
                ) && 
                (
                    this.InstructedAmount == input.InstructedAmount ||
                    (this.InstructedAmount != null &&
                    this.InstructedAmount.Equals(input.InstructedAmount))
                ) && 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && 
                (
                    this.PaymentProduct == input.PaymentProduct ||
                    this.PaymentProduct.Equals(input.PaymentProduct)
                ) && 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    this.PaymentStatus.Equals(input.PaymentStatus)
                ) && 
                (
                    this.RemittanceInformationUnstructured == input.RemittanceInformationUnstructured ||
                    (this.RemittanceInformationUnstructured != null &&
                    this.RemittanceInformationUnstructured.Equals(input.RemittanceInformationUnstructured))
                ) && 
                (
                    this.RequestedExecutionDate == input.RequestedExecutionDate ||
                    (this.RequestedExecutionDate != null &&
                    this.RequestedExecutionDate.Equals(input.RequestedExecutionDate))
                ) && 
                (
                    this.RequestedExecutionTime == input.RequestedExecutionTime ||
                    (this.RequestedExecutionTime != null &&
                    this.RequestedExecutionTime.Equals(input.RequestedExecutionTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreditorAccount != null)
                    hashCode = hashCode * 59 + this.CreditorAccount.GetHashCode();
                if (this.CreditorAddress != null)
                    hashCode = hashCode * 59 + this.CreditorAddress.GetHashCode();
                if (this.CreditorAgent != null)
                    hashCode = hashCode * 59 + this.CreditorAgent.GetHashCode();
                if (this.CreditorName != null)
                    hashCode = hashCode * 59 + this.CreditorName.GetHashCode();
                if (this.DebtorAccount != null)
                    hashCode = hashCode * 59 + this.DebtorAccount.GetHashCode();
                if (this.EndToEndIdentification != null)
                    hashCode = hashCode * 59 + this.EndToEndIdentification.GetHashCode();
                if (this.InstructedAmount != null)
                    hashCode = hashCode * 59 + this.InstructedAmount.GetHashCode();
                if (this.PaymentId != null)
                    hashCode = hashCode * 59 + this.PaymentId.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentProduct.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentStatus.GetHashCode();
                if (this.RemittanceInformationUnstructured != null)
                    hashCode = hashCode * 59 + this.RemittanceInformationUnstructured.GetHashCode();
                if (this.RequestedExecutionDate != null)
                    hashCode = hashCode * 59 + this.RequestedExecutionDate.GetHashCode();
                if (this.RequestedExecutionTime != null)
                    hashCode = hashCode * 59 + this.RequestedExecutionTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
