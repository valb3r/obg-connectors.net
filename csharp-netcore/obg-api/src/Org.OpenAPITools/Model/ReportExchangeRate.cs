/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Exchange Rate.
    /// </summary>
    [DataContract(Name = "reportExchangeRate")]
    public partial class ReportExchangeRate : IEquatable<ReportExchangeRate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportExchangeRate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportExchangeRate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportExchangeRate" /> class.
        /// </summary>
        /// <param name="sourceCurrency">ISO 4217 Alpha 3 currency code.  (required).</param>
        /// <param name="exchangeRate">exchangeRate (required).</param>
        /// <param name="unitCurrency">unitCurrency (required).</param>
        /// <param name="targetCurrency">ISO 4217 Alpha 3 currency code.  (required).</param>
        /// <param name="quotationDate">quotationDate (required).</param>
        /// <param name="contractIdentification">contractIdentification.</param>
        public ReportExchangeRate(string sourceCurrency = default(string), string exchangeRate = default(string), string unitCurrency = default(string), string targetCurrency = default(string), DateTime quotationDate = default(DateTime), string contractIdentification = default(string))
        {
            // to ensure "sourceCurrency" is required (not null)
            this.SourceCurrency = sourceCurrency ?? throw new ArgumentNullException("sourceCurrency is a required property for ReportExchangeRate and cannot be null");
            // to ensure "exchangeRate" is required (not null)
            this.ExchangeRate = exchangeRate ?? throw new ArgumentNullException("exchangeRate is a required property for ReportExchangeRate and cannot be null");
            // to ensure "unitCurrency" is required (not null)
            this.UnitCurrency = unitCurrency ?? throw new ArgumentNullException("unitCurrency is a required property for ReportExchangeRate and cannot be null");
            // to ensure "targetCurrency" is required (not null)
            this.TargetCurrency = targetCurrency ?? throw new ArgumentNullException("targetCurrency is a required property for ReportExchangeRate and cannot be null");
            this.QuotationDate = quotationDate;
            this.ContractIdentification = contractIdentification;
        }

        /// <summary>
        /// ISO 4217 Alpha 3 currency code. 
        /// </summary>
        /// <value>ISO 4217 Alpha 3 currency code. </value>
        [DataMember(Name = "sourceCurrency", IsRequired = true, EmitDefaultValue = false)]
        public string SourceCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name = "exchangeRate", IsRequired = true, EmitDefaultValue = false)]
        public string ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets UnitCurrency
        /// </summary>
        [DataMember(Name = "unitCurrency", IsRequired = true, EmitDefaultValue = false)]
        public string UnitCurrency { get; set; }

        /// <summary>
        /// ISO 4217 Alpha 3 currency code. 
        /// </summary>
        /// <value>ISO 4217 Alpha 3 currency code. </value>
        [DataMember(Name = "targetCurrency", IsRequired = true, EmitDefaultValue = false)]
        public string TargetCurrency { get; set; }

        /// <summary>
        /// Gets or Sets QuotationDate
        /// </summary>
        [DataMember(Name = "quotationDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime QuotationDate { get; set; }

        /// <summary>
        /// Gets or Sets ContractIdentification
        /// </summary>
        [DataMember(Name = "contractIdentification", EmitDefaultValue = false)]
        public string ContractIdentification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportExchangeRate {\n");
            sb.Append("  SourceCurrency: ").Append(SourceCurrency).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  UnitCurrency: ").Append(UnitCurrency).Append("\n");
            sb.Append("  TargetCurrency: ").Append(TargetCurrency).Append("\n");
            sb.Append("  QuotationDate: ").Append(QuotationDate).Append("\n");
            sb.Append("  ContractIdentification: ").Append(ContractIdentification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportExchangeRate);
        }

        /// <summary>
        /// Returns true if ReportExchangeRate instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportExchangeRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportExchangeRate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceCurrency == input.SourceCurrency ||
                    (this.SourceCurrency != null &&
                    this.SourceCurrency.Equals(input.SourceCurrency))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.UnitCurrency == input.UnitCurrency ||
                    (this.UnitCurrency != null &&
                    this.UnitCurrency.Equals(input.UnitCurrency))
                ) && 
                (
                    this.TargetCurrency == input.TargetCurrency ||
                    (this.TargetCurrency != null &&
                    this.TargetCurrency.Equals(input.TargetCurrency))
                ) && 
                (
                    this.QuotationDate == input.QuotationDate ||
                    (this.QuotationDate != null &&
                    this.QuotationDate.Equals(input.QuotationDate))
                ) && 
                (
                    this.ContractIdentification == input.ContractIdentification ||
                    (this.ContractIdentification != null &&
                    this.ContractIdentification.Equals(input.ContractIdentification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceCurrency != null)
                    hashCode = hashCode * 59 + this.SourceCurrency.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.UnitCurrency != null)
                    hashCode = hashCode * 59 + this.UnitCurrency.GetHashCode();
                if (this.TargetCurrency != null)
                    hashCode = hashCode * 59 + this.TargetCurrency.GetHashCode();
                if (this.QuotationDate != null)
                    hashCode = hashCode * 59 + this.QuotationDate.GetHashCode();
                if (this.ContractIdentification != null)
                    hashCode = hashCode * 59 + this.ContractIdentification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SourceCurrency (string) pattern
            Regex regexSourceCurrency = new Regex(@"[A-Z]{3}", RegexOptions.CultureInvariant);
            if (false == regexSourceCurrency.Match(this.SourceCurrency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCurrency, must match a pattern of " + regexSourceCurrency, new [] { "SourceCurrency" });
            }

            // TargetCurrency (string) pattern
            Regex regexTargetCurrency = new Regex(@"[A-Z]{3}", RegexOptions.CultureInvariant);
            if (false == regexTargetCurrency.Match(this.TargetCurrency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TargetCurrency, must match a pattern of " + regexTargetCurrency, new [] { "TargetCurrency" });
            }

            yield break;
        }
    }

}
