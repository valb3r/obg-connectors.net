/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AccountDetails
    /// </summary>
    [DataContract(Name = "AccountDetails")]
    public partial class AccountDetails : IEquatable<AccountDetails>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name = "accountType", EmitDefaultValue = false)]
        public AccountType? AccountType { get; set; }
        /// <summary>
        /// Defines UsageType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsageTypeEnum
        {
            /// <summary>
            /// Enum PRIV for value: PRIV
            /// </summary>
            [EnumMember(Value = "PRIV")]
            PRIV = 1,

            /// <summary>
            /// Enum ORGA for value: ORGA
            /// </summary>
            [EnumMember(Value = "ORGA")]
            ORGA = 2

        }


        /// <summary>
        /// Gets or Sets UsageType
        /// </summary>
        [DataMember(Name = "usageType", EmitDefaultValue = false)]
        public UsageTypeEnum? UsageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDetails" /> class.
        /// </summary>
        /// <param name="accountStatus">accountStatus.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="balances">balances.</param>
        /// <param name="bban">bban.</param>
        /// <param name="bic">bic.</param>
        /// <param name="currency">currency.</param>
        /// <param name="details">details.</param>
        /// <param name="iban">iban.</param>
        /// <param name="id">id.</param>
        /// <param name="linkedAccounts">linkedAccounts.</param>
        /// <param name="maskedPan">maskedPan.</param>
        /// <param name="msisdn">msisdn.</param>
        /// <param name="name">name.</param>
        /// <param name="pan">pan.</param>
        /// <param name="product">product.</param>
        /// <param name="usageType">usageType.</param>
        public AccountDetails(AccountStatus accountStatus = default(AccountStatus), AccountType? accountType = default(AccountType?), List<AccountBalance> balances = default(List<AccountBalance>), string bban = default(string), string bic = default(string), string currency = default(string), string details = default(string), string iban = default(string), string id = default(string), string linkedAccounts = default(string), string maskedPan = default(string), string msisdn = default(string), string name = default(string), string pan = default(string), string product = default(string), UsageTypeEnum? usageType = default(UsageTypeEnum?))
        {
            this.AccountStatus = accountStatus;
            this.AccountType = accountType;
            this.Balances = balances;
            this.Bban = bban;
            this.Bic = bic;
            this.Currency = currency;
            this.Details = details;
            this.Iban = iban;
            this.Id = id;
            this.LinkedAccounts = linkedAccounts;
            this.MaskedPan = maskedPan;
            this.Msisdn = msisdn;
            this.Name = name;
            this.Pan = pan;
            this.Product = product;
            this.UsageType = usageType;
        }

        /// <summary>
        /// Gets or Sets AccountStatus
        /// </summary>
        [DataMember(Name = "accountStatus", EmitDefaultValue = false)]
        public AccountStatus AccountStatus { get; set; }

        /// <summary>
        /// Gets or Sets Balances
        /// </summary>
        [DataMember(Name = "balances", EmitDefaultValue = false)]
        public List<AccountBalance> Balances { get; set; }

        /// <summary>
        /// Gets or Sets Bban
        /// </summary>
        [DataMember(Name = "bban", EmitDefaultValue = false)]
        public string Bban { get; set; }

        /// <summary>
        /// Gets or Sets Bic
        /// </summary>
        [DataMember(Name = "bic", EmitDefaultValue = false)]
        public string Bic { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        [DataMember(Name = "iban", EmitDefaultValue = false)]
        public string Iban { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LinkedAccounts
        /// </summary>
        [DataMember(Name = "linkedAccounts", EmitDefaultValue = false)]
        public string LinkedAccounts { get; set; }

        /// <summary>
        /// Gets or Sets MaskedPan
        /// </summary>
        [DataMember(Name = "maskedPan", EmitDefaultValue = false)]
        public string MaskedPan { get; set; }

        /// <summary>
        /// Gets or Sets Msisdn
        /// </summary>
        [DataMember(Name = "msisdn", EmitDefaultValue = false)]
        public string Msisdn { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Pan
        /// </summary>
        [DataMember(Name = "pan", EmitDefaultValue = false)]
        public string Pan { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name = "product", EmitDefaultValue = false)]
        public string Product { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDetails {\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Balances: ").Append(Balances).Append("\n");
            sb.Append("  Bban: ").Append(Bban).Append("\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LinkedAccounts: ").Append(LinkedAccounts).Append("\n");
            sb.Append("  MaskedPan: ").Append(MaskedPan).Append("\n");
            sb.Append("  Msisdn: ").Append(Msisdn).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pan: ").Append(Pan).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  UsageType: ").Append(UsageType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDetails);
        }

        /// <summary>
        /// Returns true if AccountDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountStatus == input.AccountStatus ||
                    (this.AccountStatus != null &&
                    this.AccountStatus.Equals(input.AccountStatus))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    this.AccountType.Equals(input.AccountType)
                ) && 
                (
                    this.Balances == input.Balances ||
                    this.Balances != null &&
                    input.Balances != null &&
                    this.Balances.SequenceEqual(input.Balances)
                ) && 
                (
                    this.Bban == input.Bban ||
                    (this.Bban != null &&
                    this.Bban.Equals(input.Bban))
                ) && 
                (
                    this.Bic == input.Bic ||
                    (this.Bic != null &&
                    this.Bic.Equals(input.Bic))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LinkedAccounts == input.LinkedAccounts ||
                    (this.LinkedAccounts != null &&
                    this.LinkedAccounts.Equals(input.LinkedAccounts))
                ) && 
                (
                    this.MaskedPan == input.MaskedPan ||
                    (this.MaskedPan != null &&
                    this.MaskedPan.Equals(input.MaskedPan))
                ) && 
                (
                    this.Msisdn == input.Msisdn ||
                    (this.Msisdn != null &&
                    this.Msisdn.Equals(input.Msisdn))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Pan == input.Pan ||
                    (this.Pan != null &&
                    this.Pan.Equals(input.Pan))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.UsageType == input.UsageType ||
                    this.UsageType.Equals(input.UsageType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountStatus != null)
                    hashCode = hashCode * 59 + this.AccountStatus.GetHashCode();
                hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.Balances != null)
                    hashCode = hashCode * 59 + this.Balances.GetHashCode();
                if (this.Bban != null)
                    hashCode = hashCode * 59 + this.Bban.GetHashCode();
                if (this.Bic != null)
                    hashCode = hashCode * 59 + this.Bic.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Iban != null)
                    hashCode = hashCode * 59 + this.Iban.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LinkedAccounts != null)
                    hashCode = hashCode * 59 + this.LinkedAccounts.GetHashCode();
                if (this.MaskedPan != null)
                    hashCode = hashCode * 59 + this.MaskedPan.GetHashCode();
                if (this.Msisdn != null)
                    hashCode = hashCode * 59 + this.Msisdn.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Pan != null)
                    hashCode = hashCode * 59 + this.Pan.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                hashCode = hashCode * 59 + this.UsageType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
