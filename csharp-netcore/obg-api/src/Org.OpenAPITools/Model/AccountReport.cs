/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// JSON based account report. This account report contains transactions resulting from the query parameters.  &#39;booked&#39; shall be contained if bookingStatus parameter is set to \&quot;booked\&quot; or \&quot;both\&quot;.  &#39;pending&#39; is not contained if the bookingStatus parameter is set to \&quot;booked\&quot;. 
    /// </summary>
    [DataContract(Name = "accountReport")]
    public partial class AccountReport : IEquatable<AccountReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountReport" /> class.
        /// </summary>
        /// <param name="booked">Array of transaction details..</param>
        /// <param name="pending">Array of transaction details..</param>
        public AccountReport(List<TransactionDetails> booked = default(List<TransactionDetails>), List<TransactionDetails> pending = default(List<TransactionDetails>))
        {
            this.Booked = booked;
            this.Pending = pending;
        }

        /// <summary>
        /// Array of transaction details.
        /// </summary>
        /// <value>Array of transaction details.</value>
        [DataMember(Name = "booked", EmitDefaultValue = false)]
        public List<TransactionDetails> Booked { get; set; }

        /// <summary>
        /// Array of transaction details.
        /// </summary>
        /// <value>Array of transaction details.</value>
        [DataMember(Name = "pending", EmitDefaultValue = false)]
        public List<TransactionDetails> Pending { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountReport {\n");
            sb.Append("  Booked: ").Append(Booked).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountReport);
        }

        /// <summary>
        /// Returns true if AccountReport instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Booked == input.Booked ||
                    this.Booked != null &&
                    input.Booked != null &&
                    this.Booked.SequenceEqual(input.Booked)
                ) && 
                (
                    this.Pending == input.Pending ||
                    this.Pending != null &&
                    input.Pending != null &&
                    this.Pending.SequenceEqual(input.Pending)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Booked != null)
                    hashCode = hashCode * 59 + this.Booked.GetHashCode();
                if (this.Pending != null)
                    hashCode = hashCode * 59 + this.Pending.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
