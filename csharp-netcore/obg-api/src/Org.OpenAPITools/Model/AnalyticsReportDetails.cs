/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// JSON based analytics report. This account report contains transaction categorization result. 
    /// </summary>
    [DataContract(Name = "analyticsReportDetails")]
    public partial class AnalyticsReportDetails : IEquatable<AnalyticsReportDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsReportDetails" /> class.
        /// </summary>
        /// <param name="transactionId">The id of transaction this analytics result refers to..</param>
        /// <param name="mainCategory">Main category of the booking..</param>
        /// <param name="subCategory">Sub category of the booking..</param>
        /// <param name="specification">Specification of the booking..</param>
        /// <param name="otherAccount">Related account..</param>
        /// <param name="logo">Logo..</param>
        /// <param name="homepage">Homepage..</param>
        /// <param name="hotline">Hotline..</param>
        /// <param name="email">Email..</param>
        /// <param name="custom">Custom information about analyzed transaction..</param>
        /// <param name="usedRules">Rules that were used to analyze..</param>
        /// <param name="nextBookingDate">Classification next booking date..</param>
        /// <param name="cycle">Classification cycle result..</param>
        public AnalyticsReportDetails(string transactionId = default(string), string mainCategory = default(string), string subCategory = default(string), string specification = default(string), string otherAccount = default(string), string logo = default(string), string homepage = default(string), string hotline = default(string), string email = default(string), Dictionary<string, string> custom = default(Dictionary<string, string>), List<string> usedRules = default(List<string>), DateTime nextBookingDate = default(DateTime), string cycle = default(string))
        {
            this.TransactionId = transactionId;
            this.MainCategory = mainCategory;
            this.SubCategory = subCategory;
            this.Specification = specification;
            this.OtherAccount = otherAccount;
            this.Logo = logo;
            this.Homepage = homepage;
            this.Hotline = hotline;
            this.Email = email;
            this.Custom = custom;
            this.UsedRules = usedRules;
            this.NextBookingDate = nextBookingDate;
            this.Cycle = cycle;
        }

        /// <summary>
        /// The id of transaction this analytics result refers to.
        /// </summary>
        /// <value>The id of transaction this analytics result refers to.</value>
        [DataMember(Name = "transactionId", EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Main category of the booking.
        /// </summary>
        /// <value>Main category of the booking.</value>
        [DataMember(Name = "mainCategory", EmitDefaultValue = false)]
        public string MainCategory { get; set; }

        /// <summary>
        /// Sub category of the booking.
        /// </summary>
        /// <value>Sub category of the booking.</value>
        [DataMember(Name = "subCategory", EmitDefaultValue = false)]
        public string SubCategory { get; set; }

        /// <summary>
        /// Specification of the booking.
        /// </summary>
        /// <value>Specification of the booking.</value>
        [DataMember(Name = "specification", EmitDefaultValue = false)]
        public string Specification { get; set; }

        /// <summary>
        /// Related account.
        /// </summary>
        /// <value>Related account.</value>
        [DataMember(Name = "otherAccount", EmitDefaultValue = false)]
        public string OtherAccount { get; set; }

        /// <summary>
        /// Logo.
        /// </summary>
        /// <value>Logo.</value>
        [DataMember(Name = "logo", EmitDefaultValue = false)]
        public string Logo { get; set; }

        /// <summary>
        /// Homepage.
        /// </summary>
        /// <value>Homepage.</value>
        [DataMember(Name = "homepage", EmitDefaultValue = false)]
        public string Homepage { get; set; }

        /// <summary>
        /// Hotline.
        /// </summary>
        /// <value>Hotline.</value>
        [DataMember(Name = "hotline", EmitDefaultValue = false)]
        public string Hotline { get; set; }

        /// <summary>
        /// Email.
        /// </summary>
        /// <value>Email.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Custom information about analyzed transaction.
        /// </summary>
        /// <value>Custom information about analyzed transaction.</value>
        [DataMember(Name = "custom", EmitDefaultValue = false)]
        public Dictionary<string, string> Custom { get; set; }

        /// <summary>
        /// Rules that were used to analyze.
        /// </summary>
        /// <value>Rules that were used to analyze.</value>
        [DataMember(Name = "usedRules", EmitDefaultValue = false)]
        public List<string> UsedRules { get; set; }

        /// <summary>
        /// Classification next booking date.
        /// </summary>
        /// <value>Classification next booking date.</value>
        [DataMember(Name = "nextBookingDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime NextBookingDate { get; set; }

        /// <summary>
        /// Classification cycle result.
        /// </summary>
        /// <value>Classification cycle result.</value>
        [DataMember(Name = "cycle", EmitDefaultValue = false)]
        public string Cycle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyticsReportDetails {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  MainCategory: ").Append(MainCategory).Append("\n");
            sb.Append("  SubCategory: ").Append(SubCategory).Append("\n");
            sb.Append("  Specification: ").Append(Specification).Append("\n");
            sb.Append("  OtherAccount: ").Append(OtherAccount).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Homepage: ").Append(Homepage).Append("\n");
            sb.Append("  Hotline: ").Append(Hotline).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  UsedRules: ").Append(UsedRules).Append("\n");
            sb.Append("  NextBookingDate: ").Append(NextBookingDate).Append("\n");
            sb.Append("  Cycle: ").Append(Cycle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyticsReportDetails);
        }

        /// <summary>
        /// Returns true if AnalyticsReportDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyticsReportDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticsReportDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.MainCategory == input.MainCategory ||
                    (this.MainCategory != null &&
                    this.MainCategory.Equals(input.MainCategory))
                ) && 
                (
                    this.SubCategory == input.SubCategory ||
                    (this.SubCategory != null &&
                    this.SubCategory.Equals(input.SubCategory))
                ) && 
                (
                    this.Specification == input.Specification ||
                    (this.Specification != null &&
                    this.Specification.Equals(input.Specification))
                ) && 
                (
                    this.OtherAccount == input.OtherAccount ||
                    (this.OtherAccount != null &&
                    this.OtherAccount.Equals(input.OtherAccount))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.Homepage == input.Homepage ||
                    (this.Homepage != null &&
                    this.Homepage.Equals(input.Homepage))
                ) && 
                (
                    this.Hotline == input.Hotline ||
                    (this.Hotline != null &&
                    this.Hotline.Equals(input.Hotline))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Custom == input.Custom ||
                    this.Custom != null &&
                    input.Custom != null &&
                    this.Custom.SequenceEqual(input.Custom)
                ) && 
                (
                    this.UsedRules == input.UsedRules ||
                    this.UsedRules != null &&
                    input.UsedRules != null &&
                    this.UsedRules.SequenceEqual(input.UsedRules)
                ) && 
                (
                    this.NextBookingDate == input.NextBookingDate ||
                    (this.NextBookingDate != null &&
                    this.NextBookingDate.Equals(input.NextBookingDate))
                ) && 
                (
                    this.Cycle == input.Cycle ||
                    (this.Cycle != null &&
                    this.Cycle.Equals(input.Cycle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.MainCategory != null)
                    hashCode = hashCode * 59 + this.MainCategory.GetHashCode();
                if (this.SubCategory != null)
                    hashCode = hashCode * 59 + this.SubCategory.GetHashCode();
                if (this.Specification != null)
                    hashCode = hashCode * 59 + this.Specification.GetHashCode();
                if (this.OtherAccount != null)
                    hashCode = hashCode * 59 + this.OtherAccount.GetHashCode();
                if (this.Logo != null)
                    hashCode = hashCode * 59 + this.Logo.GetHashCode();
                if (this.Homepage != null)
                    hashCode = hashCode * 59 + this.Homepage.GetHashCode();
                if (this.Hotline != null)
                    hashCode = hashCode * 59 + this.Hotline.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Custom != null)
                    hashCode = hashCode * 59 + this.Custom.GetHashCode();
                if (this.UsedRules != null)
                    hashCode = hashCode * 59 + this.UsedRules.GetHashCode();
                if (this.NextBookingDate != null)
                    hashCode = hashCode * 59 + this.NextBookingDate.GetHashCode();
                if (this.Cycle != null)
                    hashCode = hashCode * 59 + this.Cycle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
