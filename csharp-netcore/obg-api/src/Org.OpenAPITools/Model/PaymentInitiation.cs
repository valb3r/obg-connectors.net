/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PaymentInitiation
    /// </summary>
    [DataContract(Name = "paymentInitiation")]
    public partial class PaymentInitiation : IEquatable<PaymentInitiation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInitiation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentInitiation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInitiation" /> class.
        /// </summary>
        /// <param name="endToEndIdentification">endToEndIdentification.</param>
        /// <param name="debtorAccount">debtorAccount (required).</param>
        /// <param name="instructedAmount">instructedAmount (required).</param>
        /// <param name="creditorAccount">creditorAccount (required).</param>
        /// <param name="creditorAgent">BICFI .</param>
        /// <param name="creditorAgentName">Creditor agent name..</param>
        /// <param name="creditorName">Creditor Name. (required).</param>
        /// <param name="creditorAddress">creditorAddress.</param>
        /// <param name="remittanceInformationUnstructured">Unstructured remittance information. .</param>
        /// <param name="requestedExecutionDate">requestedExecutionDate.</param>
        /// <param name="requestedExecutionTime">requestedExecutionTime.</param>
        /// <param name="instantPayment">instantPayment.</param>
        public PaymentInitiation(string endToEndIdentification = default(string), AccountReference1 debtorAccount = default(AccountReference1), Amount1 instructedAmount = default(Amount1), AccountReference1 creditorAccount = default(AccountReference1), string creditorAgent = default(string), string creditorAgentName = default(string), string creditorName = default(string), Address1 creditorAddress = default(Address1), string remittanceInformationUnstructured = default(string), DateTime requestedExecutionDate = default(DateTime), string requestedExecutionTime = default(string), bool instantPayment = default(bool))
        {
            // to ensure "debtorAccount" is required (not null)
            this.DebtorAccount = debtorAccount ?? throw new ArgumentNullException("debtorAccount is a required property for PaymentInitiation and cannot be null");
            // to ensure "instructedAmount" is required (not null)
            this.InstructedAmount = instructedAmount ?? throw new ArgumentNullException("instructedAmount is a required property for PaymentInitiation and cannot be null");
            // to ensure "creditorAccount" is required (not null)
            this.CreditorAccount = creditorAccount ?? throw new ArgumentNullException("creditorAccount is a required property for PaymentInitiation and cannot be null");
            // to ensure "creditorName" is required (not null)
            this.CreditorName = creditorName ?? throw new ArgumentNullException("creditorName is a required property for PaymentInitiation and cannot be null");
            this.EndToEndIdentification = endToEndIdentification;
            this.CreditorAgent = creditorAgent;
            this.CreditorAgentName = creditorAgentName;
            this.CreditorAddress = creditorAddress;
            this.RemittanceInformationUnstructured = remittanceInformationUnstructured;
            this.RequestedExecutionDate = requestedExecutionDate;
            this.RequestedExecutionTime = requestedExecutionTime;
            this.InstantPayment = instantPayment;
        }

        /// <summary>
        /// Gets or Sets EndToEndIdentification
        /// </summary>
        [DataMember(Name = "endToEndIdentification", EmitDefaultValue = false)]
        public string EndToEndIdentification { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAccount
        /// </summary>
        [DataMember(Name = "debtorAccount", IsRequired = true, EmitDefaultValue = false)]
        public AccountReference1 DebtorAccount { get; set; }

        /// <summary>
        /// Gets or Sets InstructedAmount
        /// </summary>
        [DataMember(Name = "instructedAmount", IsRequired = true, EmitDefaultValue = false)]
        public Amount1 InstructedAmount { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAccount
        /// </summary>
        [DataMember(Name = "creditorAccount", IsRequired = true, EmitDefaultValue = false)]
        public AccountReference1 CreditorAccount { get; set; }

        /// <summary>
        /// BICFI 
        /// </summary>
        /// <value>BICFI </value>
        [DataMember(Name = "creditorAgent", EmitDefaultValue = false)]
        public string CreditorAgent { get; set; }

        /// <summary>
        /// Creditor agent name.
        /// </summary>
        /// <value>Creditor agent name.</value>
        [DataMember(Name = "creditorAgentName", EmitDefaultValue = false)]
        public string CreditorAgentName { get; set; }

        /// <summary>
        /// Creditor Name.
        /// </summary>
        /// <value>Creditor Name.</value>
        [DataMember(Name = "creditorName", IsRequired = true, EmitDefaultValue = false)]
        public string CreditorName { get; set; }

        /// <summary>
        /// Gets or Sets CreditorAddress
        /// </summary>
        [DataMember(Name = "creditorAddress", EmitDefaultValue = false)]
        public Address1 CreditorAddress { get; set; }

        /// <summary>
        /// Unstructured remittance information. 
        /// </summary>
        /// <value>Unstructured remittance information. </value>
        [DataMember(Name = "remittanceInformationUnstructured", EmitDefaultValue = false)]
        public string RemittanceInformationUnstructured { get; set; }

        /// <summary>
        /// Gets or Sets RequestedExecutionDate
        /// </summary>
        [DataMember(Name = "requestedExecutionDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime RequestedExecutionDate { get; set; }

        /// <summary>
        /// Gets or Sets RequestedExecutionTime
        /// </summary>
        [DataMember(Name = "requestedExecutionTime", EmitDefaultValue = false)]
        public string RequestedExecutionTime { get; set; }

        /// <summary>
        /// Gets or Sets InstantPayment
        /// </summary>
        [DataMember(Name = "instantPayment", EmitDefaultValue = true)]
        public bool InstantPayment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentInitiation {\n");
            sb.Append("  EndToEndIdentification: ").Append(EndToEndIdentification).Append("\n");
            sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
            sb.Append("  InstructedAmount: ").Append(InstructedAmount).Append("\n");
            sb.Append("  CreditorAccount: ").Append(CreditorAccount).Append("\n");
            sb.Append("  CreditorAgent: ").Append(CreditorAgent).Append("\n");
            sb.Append("  CreditorAgentName: ").Append(CreditorAgentName).Append("\n");
            sb.Append("  CreditorName: ").Append(CreditorName).Append("\n");
            sb.Append("  CreditorAddress: ").Append(CreditorAddress).Append("\n");
            sb.Append("  RemittanceInformationUnstructured: ").Append(RemittanceInformationUnstructured).Append("\n");
            sb.Append("  RequestedExecutionDate: ").Append(RequestedExecutionDate).Append("\n");
            sb.Append("  RequestedExecutionTime: ").Append(RequestedExecutionTime).Append("\n");
            sb.Append("  InstantPayment: ").Append(InstantPayment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentInitiation);
        }

        /// <summary>
        /// Returns true if PaymentInitiation instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentInitiation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentInitiation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndToEndIdentification == input.EndToEndIdentification ||
                    (this.EndToEndIdentification != null &&
                    this.EndToEndIdentification.Equals(input.EndToEndIdentification))
                ) && 
                (
                    this.DebtorAccount == input.DebtorAccount ||
                    (this.DebtorAccount != null &&
                    this.DebtorAccount.Equals(input.DebtorAccount))
                ) && 
                (
                    this.InstructedAmount == input.InstructedAmount ||
                    (this.InstructedAmount != null &&
                    this.InstructedAmount.Equals(input.InstructedAmount))
                ) && 
                (
                    this.CreditorAccount == input.CreditorAccount ||
                    (this.CreditorAccount != null &&
                    this.CreditorAccount.Equals(input.CreditorAccount))
                ) && 
                (
                    this.CreditorAgent == input.CreditorAgent ||
                    (this.CreditorAgent != null &&
                    this.CreditorAgent.Equals(input.CreditorAgent))
                ) && 
                (
                    this.CreditorAgentName == input.CreditorAgentName ||
                    (this.CreditorAgentName != null &&
                    this.CreditorAgentName.Equals(input.CreditorAgentName))
                ) && 
                (
                    this.CreditorName == input.CreditorName ||
                    (this.CreditorName != null &&
                    this.CreditorName.Equals(input.CreditorName))
                ) && 
                (
                    this.CreditorAddress == input.CreditorAddress ||
                    (this.CreditorAddress != null &&
                    this.CreditorAddress.Equals(input.CreditorAddress))
                ) && 
                (
                    this.RemittanceInformationUnstructured == input.RemittanceInformationUnstructured ||
                    (this.RemittanceInformationUnstructured != null &&
                    this.RemittanceInformationUnstructured.Equals(input.RemittanceInformationUnstructured))
                ) && 
                (
                    this.RequestedExecutionDate == input.RequestedExecutionDate ||
                    (this.RequestedExecutionDate != null &&
                    this.RequestedExecutionDate.Equals(input.RequestedExecutionDate))
                ) && 
                (
                    this.RequestedExecutionTime == input.RequestedExecutionTime ||
                    (this.RequestedExecutionTime != null &&
                    this.RequestedExecutionTime.Equals(input.RequestedExecutionTime))
                ) && 
                (
                    this.InstantPayment == input.InstantPayment ||
                    this.InstantPayment.Equals(input.InstantPayment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndToEndIdentification != null)
                    hashCode = hashCode * 59 + this.EndToEndIdentification.GetHashCode();
                if (this.DebtorAccount != null)
                    hashCode = hashCode * 59 + this.DebtorAccount.GetHashCode();
                if (this.InstructedAmount != null)
                    hashCode = hashCode * 59 + this.InstructedAmount.GetHashCode();
                if (this.CreditorAccount != null)
                    hashCode = hashCode * 59 + this.CreditorAccount.GetHashCode();
                if (this.CreditorAgent != null)
                    hashCode = hashCode * 59 + this.CreditorAgent.GetHashCode();
                if (this.CreditorAgentName != null)
                    hashCode = hashCode * 59 + this.CreditorAgentName.GetHashCode();
                if (this.CreditorName != null)
                    hashCode = hashCode * 59 + this.CreditorName.GetHashCode();
                if (this.CreditorAddress != null)
                    hashCode = hashCode * 59 + this.CreditorAddress.GetHashCode();
                if (this.RemittanceInformationUnstructured != null)
                    hashCode = hashCode * 59 + this.RemittanceInformationUnstructured.GetHashCode();
                if (this.RequestedExecutionDate != null)
                    hashCode = hashCode * 59 + this.RequestedExecutionDate.GetHashCode();
                if (this.RequestedExecutionTime != null)
                    hashCode = hashCode * 59 + this.RequestedExecutionTime.GetHashCode();
                hashCode = hashCode * 59 + this.InstantPayment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EndToEndIdentification (string) maxLength
            if(this.EndToEndIdentification != null && this.EndToEndIdentification.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndToEndIdentification, length must be less than 35.", new [] { "EndToEndIdentification" });
            }

            // CreditorAgent (string) pattern
            Regex regexCreditorAgent = new Regex(@"[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}", RegexOptions.CultureInvariant);
            if (false == regexCreditorAgent.Match(this.CreditorAgent).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditorAgent, must match a pattern of " + regexCreditorAgent, new [] { "CreditorAgent" });
            }

            // CreditorAgentName (string) maxLength
            if(this.CreditorAgentName != null && this.CreditorAgentName.Length > 70)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditorAgentName, length must be less than 70.", new [] { "CreditorAgentName" });
            }

            // CreditorName (string) maxLength
            if(this.CreditorName != null && this.CreditorName.Length > 70)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditorName, length must be less than 70.", new [] { "CreditorName" });
            }

            // RemittanceInformationUnstructured (string) maxLength
            if(this.RemittanceInformationUnstructured != null && this.RemittanceInformationUnstructured.Length > 140)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RemittanceInformationUnstructured, length must be less than 140.", new [] { "RemittanceInformationUnstructured" });
            }

            yield break;
        }
    }

}
