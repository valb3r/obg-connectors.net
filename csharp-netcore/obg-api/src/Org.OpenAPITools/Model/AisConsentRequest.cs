/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Ais consent request
    /// </summary>
    [DataContract(Name = "AisConsentRequest")]
    public partial class AisConsentRequest : IEquatable<AisConsentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AisConsentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AisConsentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AisConsentRequest" /> class.
        /// </summary>
        /// <param name="access">access (required).</param>
        /// <param name="frequencyPerDay">Maximum frequency for an access per day. For a once-off access, this attribute is set to 1 (required).</param>
        /// <param name="recurringIndicator">&#39;true&#39;, if the consent is for recurring access to the account data , &#39;false&#39;, if the consent is for one access to the account data (required).</param>
        /// <param name="validUntil">Consent&#x60;s expiration date. The content is the local ASPSP date in ISODate Format (required).</param>
        /// <param name="combinedServiceIndicator">&#39;true&#39;, if the consent is i.e. account list and then payment &#39;false&#39;, if the consent is for one access to the account data (default to false).</param>
        public AisConsentRequest(AisAccountAccessInfo access = default(AisAccountAccessInfo), int frequencyPerDay = default(int), bool recurringIndicator = default(bool), DateTime validUntil = default(DateTime), bool combinedServiceIndicator = false)
        {
            // to ensure "access" is required (not null)
            this.Access = access ?? throw new ArgumentNullException("access is a required property for AisConsentRequest and cannot be null");
            this.FrequencyPerDay = frequencyPerDay;
            this.RecurringIndicator = recurringIndicator;
            this.ValidUntil = validUntil;
            this.CombinedServiceIndicator = combinedServiceIndicator;
        }

        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name = "access", IsRequired = true, EmitDefaultValue = false)]
        public AisAccountAccessInfo Access { get; set; }

        /// <summary>
        /// Maximum frequency for an access per day. For a once-off access, this attribute is set to 1
        /// </summary>
        /// <value>Maximum frequency for an access per day. For a once-off access, this attribute is set to 1</value>
        [DataMember(Name = "frequencyPerDay", IsRequired = true, EmitDefaultValue = false)]
        public int FrequencyPerDay { get; set; }

        /// <summary>
        /// &#39;true&#39;, if the consent is for recurring access to the account data , &#39;false&#39;, if the consent is for one access to the account data
        /// </summary>
        /// <value>&#39;true&#39;, if the consent is for recurring access to the account data , &#39;false&#39;, if the consent is for one access to the account data</value>
        [DataMember(Name = "recurringIndicator", IsRequired = true, EmitDefaultValue = true)]
        public bool RecurringIndicator { get; set; }

        /// <summary>
        /// Consent&#x60;s expiration date. The content is the local ASPSP date in ISODate Format
        /// </summary>
        /// <value>Consent&#x60;s expiration date. The content is the local ASPSP date in ISODate Format</value>
        [DataMember(Name = "validUntil", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ValidUntil { get; set; }

        /// <summary>
        /// &#39;true&#39;, if the consent is i.e. account list and then payment &#39;false&#39;, if the consent is for one access to the account data
        /// </summary>
        /// <value>&#39;true&#39;, if the consent is i.e. account list and then payment &#39;false&#39;, if the consent is for one access to the account data</value>
        [DataMember(Name = "combinedServiceIndicator", EmitDefaultValue = true)]
        public bool CombinedServiceIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AisConsentRequest {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  FrequencyPerDay: ").Append(FrequencyPerDay).Append("\n");
            sb.Append("  RecurringIndicator: ").Append(RecurringIndicator).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  CombinedServiceIndicator: ").Append(CombinedServiceIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AisConsentRequest);
        }

        /// <summary>
        /// Returns true if AisConsentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AisConsentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AisConsentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Access == input.Access ||
                    (this.Access != null &&
                    this.Access.Equals(input.Access))
                ) && 
                (
                    this.FrequencyPerDay == input.FrequencyPerDay ||
                    this.FrequencyPerDay.Equals(input.FrequencyPerDay)
                ) && 
                (
                    this.RecurringIndicator == input.RecurringIndicator ||
                    this.RecurringIndicator.Equals(input.RecurringIndicator)
                ) && 
                (
                    this.ValidUntil == input.ValidUntil ||
                    (this.ValidUntil != null &&
                    this.ValidUntil.Equals(input.ValidUntil))
                ) && 
                (
                    this.CombinedServiceIndicator == input.CombinedServiceIndicator ||
                    this.CombinedServiceIndicator.Equals(input.CombinedServiceIndicator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Access != null)
                    hashCode = hashCode * 59 + this.Access.GetHashCode();
                hashCode = hashCode * 59 + this.FrequencyPerDay.GetHashCode();
                hashCode = hashCode * 59 + this.RecurringIndicator.GetHashCode();
                if (this.ValidUntil != null)
                    hashCode = hashCode * 59 + this.ValidUntil.GetHashCode();
                hashCode = hashCode * 59 + this.CombinedServiceIndicator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
