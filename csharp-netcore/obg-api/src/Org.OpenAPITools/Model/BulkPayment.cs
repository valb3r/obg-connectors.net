/*
 * An include file to define common attributes
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BulkPayment
    /// </summary>
    [DataContract(Name = "BulkPayment")]
    public partial class BulkPayment : IEquatable<BulkPayment>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PaymentProduct
        /// </summary>
        [DataMember(Name = "paymentProduct", EmitDefaultValue = false)]
        public PaymentProduct? PaymentProduct { get; set; }

        /// <summary>
        /// Gets or Sets PaymentStatus
        /// </summary>
        [DataMember(Name = "paymentStatus", EmitDefaultValue = false)]
        public PaymentStatus? PaymentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkPayment" /> class.
        /// </summary>
        /// <param name="batchBookingPreferred">batchBookingPreferred.</param>
        /// <param name="debtorAccount">debtorAccount.</param>
        /// <param name="paymentId">paymentId.</param>
        /// <param name="paymentProduct">paymentProduct.</param>
        /// <param name="paymentStatus">paymentStatus.</param>
        /// <param name="payments">payments.</param>
        /// <param name="requestedExecutionDate">requestedExecutionDate.</param>
        public BulkPayment(bool batchBookingPreferred = default(bool), AccountReference debtorAccount = default(AccountReference), string paymentId = default(string), PaymentProduct? paymentProduct = default(PaymentProduct?), PaymentStatus? paymentStatus = default(PaymentStatus?), List<SinglePayment> payments = default(List<SinglePayment>), DateTime requestedExecutionDate = default(DateTime))
        {
            this.BatchBookingPreferred = batchBookingPreferred;
            this.DebtorAccount = debtorAccount;
            this.PaymentId = paymentId;
            this.PaymentProduct = paymentProduct;
            this.PaymentStatus = paymentStatus;
            this.Payments = payments;
            this.RequestedExecutionDate = requestedExecutionDate;
        }

        /// <summary>
        /// Gets or Sets BatchBookingPreferred
        /// </summary>
        [DataMember(Name = "batchBookingPreferred", EmitDefaultValue = true)]
        public bool BatchBookingPreferred { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAccount
        /// </summary>
        [DataMember(Name = "debtorAccount", EmitDefaultValue = false)]
        public AccountReference DebtorAccount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentId
        /// </summary>
        [DataMember(Name = "paymentId", EmitDefaultValue = false)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name = "payments", EmitDefaultValue = false)]
        public List<SinglePayment> Payments { get; set; }

        /// <summary>
        /// Gets or Sets RequestedExecutionDate
        /// </summary>
        [DataMember(Name = "requestedExecutionDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime RequestedExecutionDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkPayment {\n");
            sb.Append("  BatchBookingPreferred: ").Append(BatchBookingPreferred).Append("\n");
            sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  PaymentProduct: ").Append(PaymentProduct).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  RequestedExecutionDate: ").Append(RequestedExecutionDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkPayment);
        }

        /// <summary>
        /// Returns true if BulkPayment instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkPayment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BatchBookingPreferred == input.BatchBookingPreferred ||
                    this.BatchBookingPreferred.Equals(input.BatchBookingPreferred)
                ) && 
                (
                    this.DebtorAccount == input.DebtorAccount ||
                    (this.DebtorAccount != null &&
                    this.DebtorAccount.Equals(input.DebtorAccount))
                ) && 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && 
                (
                    this.PaymentProduct == input.PaymentProduct ||
                    this.PaymentProduct.Equals(input.PaymentProduct)
                ) && 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    this.PaymentStatus.Equals(input.PaymentStatus)
                ) && 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    input.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                ) && 
                (
                    this.RequestedExecutionDate == input.RequestedExecutionDate ||
                    (this.RequestedExecutionDate != null &&
                    this.RequestedExecutionDate.Equals(input.RequestedExecutionDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.BatchBookingPreferred.GetHashCode();
                if (this.DebtorAccount != null)
                    hashCode = hashCode * 59 + this.DebtorAccount.GetHashCode();
                if (this.PaymentId != null)
                    hashCode = hashCode * 59 + this.PaymentId.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentProduct.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentStatus.GetHashCode();
                if (this.Payments != null)
                    hashCode = hashCode * 59 + this.Payments.GetHashCode();
                if (this.RequestedExecutionDate != null)
                    hashCode = hashCode * 59 + this.RequestedExecutionDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
